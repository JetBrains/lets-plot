package jetbrains.datalore.visualization.plotDemo.plotConfig

import jetbrains.datalore.base.event.MouseEventSpec.MOUSE_LEFT
import jetbrains.datalore.base.event.MouseEventSpec.MOUSE_MOVED
import jetbrains.datalore.base.event.dom.DomEventUtil
import jetbrains.datalore.base.geometry.DoubleVector
import jetbrains.datalore.base.js.dom.DomEventType
import jetbrains.datalore.base.jsObject.dynamicObjectToMap
import jetbrains.datalore.base.observable.property.ValueProperty
import jetbrains.datalore.visualization.base.svg.SvgNodeContainer
import jetbrains.datalore.visualization.base.svgMapper.dom.SvgRootDocumentMapper
import jetbrains.datalore.visualization.plot.MonolithicJs
import jetbrains.datalore.visualization.plot.builder.PlotContainer
import org.w3c.dom.Node
import org.w3c.dom.events.Event
import org.w3c.dom.events.EventTarget
import org.w3c.dom.events.MouseEvent
import org.w3c.dom.svg.SVGSVGElement


/**
 * This method to be invoked with actual (demo) plot specs.
 * The demo HTML/JS is generated by JVM demo apps like `BarPlotBrowser.kt`
 */
@JsName("buildPlotSvg")
fun buildPlotSvg(plotSpecJs: dynamic, width: Double, height: Double, parentElement: Node) {
    val plotSpec = dynamicObjectToMap(plotSpecJs)

    val plotSize = DoubleVector(width, height)
    val svg = buildPlotToSvgIntern(plotSpec, plotSize, parentElement)
    parentElement.appendChild(svg)
}

private fun buildPlotToSvgIntern(
    plotSpec: MutableMap<String, Any>,
    plotSize: DoubleVector,
    eventTarget: EventTarget
): SVGSVGElement {

    val plot = MonolithicJs.createPlot(plotSpec, null)
    val plotContainer = PlotContainer(plot, ValueProperty(plotSize))

    eventTarget.addEventListener(DomEventType.MOUSE_MOVE.name, { e: Event ->
        e.stopPropagation()
        plotContainer.mouseEventPeer.dispatch(
            MOUSE_MOVED,
            DomEventUtil.translateInTargetCoord(e as MouseEvent)
        )

    })
    eventTarget.addEventListener(DomEventType.MOUSE_LEAVE.name, { e: Event ->
        e.stopPropagation()
        plotContainer.mouseEventPeer.dispatch(
            MOUSE_LEFT,
            DomEventUtil.translateInTargetCoord(e as MouseEvent)
        )
    })


    plotContainer.ensureContentBuilt()
    val svgRoot = plotContainer.svg
    val mapper = SvgRootDocumentMapper(svgRoot)
    SvgNodeContainer(svgRoot)
    mapper.attachRoot()
    return mapper.target
}




