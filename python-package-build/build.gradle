import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id "base"
}

/*
 * Copyright (c) 2019. JetBrains s.r.o.
 * Use of this source code is governed by the MIT license that can be found in the LICENSE file.
 */

// ----------------------------------------
// Building and publishing Python package
// ----------------------------------------

def currentOs = DefaultNativePlatform.getCurrentOperatingSystem()

//def task_group = 'lets plot'
def python_package_dir = "${rootDir}/python-package"
def python_package_build_dir = "${python_package_dir}/build"
def python_package_dist_dir = "${python_package_dir}/dist"

clean {
    delete python_package_build_dir
    delete python_package_dist_dir
    delete "${python_package_dir}/lets_plot/package_data"
    delete "${python_package_dir}/lets_plot.egg-info"
    delete "${python_package_dir}/kotlin-bridge/kotlin_bridge.o"
    delete fileTree("${python_package_dir}/kotlin-bridge/"){
        include "*.def"
    }
}

if (project.buildSettings.enable_python_package) {
    def python_bin_path = project.buildSettings.python.bin_path
    def python_twine_commnad = "${python_bin_path}/twine"
    def python_build_command = ["${python_bin_path}/python",
                                'setup.py',
                                'update_js',
                                'bdist_wheel',
                                "--dist-dir=${python_package_dist_dir}",]

    if (currentOs.isWindows()) {
        python_twine_commnad = "${python_bin_path}/Scripts/twine"
        python_build_command += ['build',
                                  '-c',
                                  'mingw32']
    }


    task buildPythonPackage(type: Exec) {
        group = project.letsPlotTaskGroup
        description = 'Builds lets-plot wheel distribution (python)'
        workingDir python_package_dir
        commandLine python_build_command
    }

    def pypi_prod = project.buildSettings.pypi.prod
    if (pypi_prod.username != null && pypi_prod.password != null) {
        task publishProdPythonPackage(type: Exec) {
            group = project.letsPlotTaskGroup
            description = 'Publishes lets-plot python package to pypi.org'

            workingDir python_package_dist_dir
            commandLine python_twine_commnad,
                    "upload",
                    "-u",
                    pypi_prod.username,
                    "-p",
                    pypi_prod.password,
                    "./*"
        }
    }

    def pipy_test = project.buildSettings.pypi.test
    if (pipy_test.username != null && pipy_test.password != null) {
        task publishTestPythonPackage(type: Exec) {
            group = project.letsPlotTaskGroup
            description = 'Publishes lets-plot python package to test.pypi.org'

            workingDir python_package_dist_dir
            commandLine python_twine_commnad,
                    "upload",
                    "--repository-url",
                    "https://test.pypi.org/legacy/",
                    "-u",
                    pipy_test.username,
                    "-p",
                    pipy_test.password,
                    "./*"
        }
    }

    buildPythonPackage.dependsOn(':js-package:build')
    buildPythonPackage.dependsOn(':python-extension:build')

    build.dependsOn(buildPythonPackage)
}
