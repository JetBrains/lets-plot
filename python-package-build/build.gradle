/*
 * Copyright (c) 2019. JetBrains s.r.o.
 * Use of this source code is governed by the MIT license that can be found in the LICENSE file.
 */

// ----------------------------------------
// Building and publishing Python package
// ----------------------------------------

plugins {
    id "base"
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform as platform

//def task_group = 'lets plot'
def pythonPackagePath = "${rootDir}/python-package"
def pythonPackageBuildDir = "${pythonPackagePath}/build"
def pythonPackageDistDir = "${pythonPackagePath}/dist"

clean {
    delete pythonPackageBuildDir
    delete pythonPackageDistDir
    delete "${pythonPackagePath}/lets_plot/package_data"
    delete "${pythonPackagePath}/lets_plot.egg-info"
    delete "${pythonPackagePath}/kotlin-bridge/kotlin_bridge.o"
    delete fileTree("${pythonPackagePath}/kotlin-bridge/"){
        include "*.def"
    }
}

if (localProps.enable_python_package) {
    def os = platform.getCurrentOperatingSystem()

    def pypiTestUsername = localProps."pypi.test.username"
    def pypiTestPassword = localProps."pypi.test.password"

    def pypiProdUsername = localProps."pypi.prod.username"
    def pypiProdPassword = localProps."pypi.prod.password"

    def pythonBinPath = localProps."python.bin_path"
    def pythonTwineCommand = "${pythonBinPath}/twine"
    def pythonBuildCommand = ["${pythonBinPath}/python",
                                'setup.py',
                                'update_js',
                                'bdist_wheel',
                                "--dist-dir=${pythonPackageDistDir}",]

    if (os.isWindows()) {
        pythonTwineCommand = "${pythonBinPath}/Scripts/twine"
        pythonBuildCommand += ['build',
                                  '-c',
                                  'mingw32']
    }


    task buildPythonPackage(type: Exec) {
        group = project.letsPlotTaskGroup
        description = 'Builds lets-plot wheel distribution (python)'
        workingDir pythonPackagePath
        commandLine pythonBuildCommand
    }

    if (pypiProdUsername != null && pypiProdPassword != null) {
        task publishProdPythonPackage(type: Exec) {
            group = project.letsPlotTaskGroup
            description = 'Publishes lets-plot python package to pypi.org'

            workingDir pythonPackageDistDir
            commandLine pythonTwineCommand,
                    "upload",
                    "-u",
                    pypiProdUsername,
                    "-p",
                    pypiProdPassword,
                    "./*"
        }
    }

    if (pypiTestUsername != null && pypiTestPassword != null) {
        task publishTestPythonPackage(type: Exec) {
            group = project.letsPlotTaskGroup
            description = 'Publishes lets-plot python package to test.pypi.org'

            workingDir pythonPackageDistDir
            commandLine pythonTwineCommand,
                    "upload",
                    "--repository-url",
                    "https://test.pypi.org/legacy/",
                    "-u",
                    pypiTestUsername,
                    "-p",
                    pypiTestPassword,
                    "./*"
        }
    }

    buildPythonPackage.dependsOn(':js-package:build')
    buildPythonPackage.dependsOn(':python-extension:build')

    build.dependsOn(buildPythonPackage)
}
