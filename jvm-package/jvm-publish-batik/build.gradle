plugins {
    id "org.jetbrains.kotlin.multiplatform"
    id "maven-publish"
    id "com.github.johnrengelman.shadow"
    id "signing"
}

kotlin {
    jvm()

    sourceSets {
        commonMain {
            dependencies {
                compileOnly kotlin('stdlib-common')
                compileOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            }
        }
        jvmMain {
            dependencies {
                compileOnly kotlin('stdlib-jdk8')

                compileOnly project(':jvm-package:jvm-publish-common')
                api project(':vis-svg-mapper-batik')
                api project(':vis-swing-common')
                api project(':vis-swing-batik')
                api project(':vis-demo-common')
                api project(':vis-demo-common-batik')
            }
        }
    }
}


def artifactBaseName = 'lets-plot-batik'
def artifactGroupId = project.group
def artifactVersion = project.version

//def task_group = 'lets plot'

/*
 * Copyright (c) 2019. JetBrains s.r.o.
 * Use of this source code is governed by the MIT license that can be found in the LICENSE file.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

// https://discuss.kotlinlang.org/t/how-to-publish-fat-jar-from-kotlin-multi-project-mpp/14520
// https://youtrack.jetbrains.com/issue/KT-25709
// https://discuss.kotlinlang.org/t/kotlin-1-3-m2-new-multiplatform-projects-model/9264/107
task jarLetsPlotJvmBatikClasses(type: ShadowJar) {
    group project.letsPlotTaskGroup
    archiveBaseName = artifactBaseName
    archiveVersion = artifactVersion
    configurations = [project.configurations.jvmRuntimeClasspath]

    exclude '**/*.kotlin_metadata'
    exclude '**/*.kotlin_module'
    exclude '**/*.kotlin_builtins'

    // Exclude classes that duplicates `lets-plot-common.jar`
    // This jar should contain only packages:
    //  - jetbrains.datalore.vis.svgMapper.batik  (:vis-svg-mapper-batik)
    //  - jetbrains.datalore.vis.swing            (:vis-svg-mapper-batik, :vis-swing-common, :vis-swing-batik)
    //  - jetbrains.datalore.vis.demoUtils        (:vis-demo-common, :vis-demo-common-batik)
    exclude 'jetbrains/datalore/base/**/*'
    exclude 'jetbrains/datalore/mapper/**/*'
    exclude 'jetbrains/datalore/plot/**/*'
    exclude 'jetbrains/datalore/vis/canvas/**/*'
    exclude 'jetbrains/datalore/vis/canvasFigure/**/*'
    exclude 'jetbrains/datalore/vis/svg/**/*'
    exclude 'jetbrains/datalore/vis/svgToScene/**/*'
    exclude 'jetbrains/datalore/vis/svgToString/**/*'
    
    // Exclude other classes: either not needed or present in `lets-plot-common.jar`
    exclude 'com/google/**/*'
    exclude 'kotlin/**/*'
    exclude 'kotlinx/**/*'
    exclude 'mu/**/*'
    exclude 'org/intellij/lang/annotations/**/*'
    exclude 'org/jetbrains/annotations/**/*'
    exclude 'org/slf4j/**/*'
    exclude 'junit/**/*'
    exclude 'org/junit/**/*'
    exclude 'org/hamcrest/**/*'

    // exclude Batik packages and its dependencies
    exclude 'org/apache/**/*'
    exclude 'org/w3c/**/*'
    exclude 'org/xml/**/*'

    // exclude something java (?)
    exclude 'java_cup/**/*'     // Construction of Useful Parsers and is an LALR parser generator for Java.
    exclude 'javax/**/*'

    // lets-plot JavaFX renderer resource.
    exclude 'svgMapper/**/*'
}

task jarLetsPlotJvmBatikSources(type: ShadowJar) {
    group project.letsPlotTaskGroup
    archiveBaseName = artifactBaseName
    archiveVersion = artifactVersion
    classifier 'sources'
    configurations = [rootProject.configurations.letsPlotJvmBatikSources]
}

publishing {
    publications {
        letsPlotJvmBatik(MavenPublication) {
            groupId artifactGroupId
            artifactId artifactBaseName
            version artifactVersion

            artifact jarLetsPlotJvmBatikClasses
            artifact jarLetsPlotJvmBatikSources
            artifact rootProject.jarJavaDocs

            pom {
                name = "Lets-Plot for Swing/Batik"
                description = "Lets-Plot JVM package with Swing/Batik rendering"
                url = "https://github.com/JetBrains/lets-plot"
                licenses {
                    license {
                        name = "MIT"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                developers {
                    developer {
                        id = "jetbrains"
                        name = "JetBrains"
                        email = "lets-plot@jetbrains.com"
                    }
                }
                scm {
                    url = "https://github.com/JetBrains/lets-plot"
                }
                withXml {
                    def deps = asNode().appendNode('dependencies')
                    // Apache Batik dependencies
                    batikArtifacts.forEach {
                        def dep = deps.appendNode('dependency')
                        dep.appendNode('groupId', batikGroupId)
                        dep.appendNode('artifactId', it)
                        dep.appendNode('version', batik_version)
                    }

                    // Other dependencies
                    // Lets-Plot common
                    def dep = deps.appendNode('dependency')
                    dep.appendNode('groupId', artifactGroupId)
                    dep.appendNode('artifactId', 'lets-plot-common')
                    dep.appendNode('version', artifactVersion)
                    // Kotlin HTML
                    dep = deps.appendNode('dependency')
                    dep.appendNode('groupId', 'org.jetbrains.kotlinx')
                    dep.appendNode('artifactId', 'kotlinx-html-jvm')
                    dep.appendNode('version', kotlinx_html_version)
                    // Hamcrest tests
//                    dep = deps.appendNode('dependency')
//                    dep.appendNode('groupId', 'org.hamcrest')
//                    dep.appendNode('artifactId', 'hamcrest-core')
//                    dep.appendNode('version', hamcrest_version)
                }
            }
        }
    }
    repositories {
        maven {
            url = project.sonatypeUrl
            credentials {
                username = project.buildSettings?.sonatype?.username
                password = project.buildSettings?.sonatype?.password
            }
        }
        mavenLocal {
            url = uri(project.localMavenRepository)
        }
    }
}

signing {
    sign publishing.publications.letsPlotJvmBatik
}
