plugins {
    id "org.jetbrains.kotlin.multiplatform"
    id "maven-publish"
    id "com.github.johnrengelman.shadow"
    id "signing"
}

/*
 * Copyright (c) 2021. JetBrains s.r.o.
 * Use of this source code is governed by the MIT license that can be found in the LICENSE file.
 */

kotlin {
    jvm()

    sourceSets {
        commonMain {
            dependencies {
                compileOnly kotlin('stdlib-common')
            }
        }
        jvmMain {
            dependencies {
                compileOnly kotlin('stdlib-jdk8')

                compileOnly project(':jvm-package:jvm-publish-common')
                api project(':vis-canvas')
                api project(':gis')
                api project(':livemap')
                api project(':plot-livemap')
            }
        }
    }
}


def artifactBaseName = 'lets-plot-gis'
def artifactGroupId = project.group
def artifactVersion = project.version

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

// https://discuss.kotlinlang.org/t/how-to-publish-fat-jar-from-kotlin-multi-project-mpp/14520
// https://youtrack.jetbrains.com/issue/KT-25709
// https://discuss.kotlinlang.org/t/kotlin-1-3-m2-new-multiplatform-projects-model/9264/107
task jarLetsPlotGISClasses(type: ShadowJar) {
    group project.letsPlotTaskGroup
    archiveBaseName = artifactBaseName
    archiveVersion = artifactVersion
    configurations = [project.configurations.jvmRuntimeClasspath]

    exclude '**/*.kotlin_metadata'
    exclude '**/*.kotlin_module'
    exclude '**/*.kotlin_builtins'

    exclude 'kotlin/**/*'
    exclude 'kotlinx/**/*'
    exclude 'mu/**/*'      // kotlin logging
    exclude 'org/slf4j/**/*'
    exclude 'org/intellij/lang/annotations/**/*'
    exclude 'org/jetbrains/annotations/**/*'

    // Exclude everything `jetbrains/datalore` except 'livemap'.
    // All 'jetbrains/datalore' is already in 'common'.
    exclude 'jetbrains/datalore/base/**/*'
    exclude 'jetbrains/datalore/plot/base/**/*'
    exclude 'jetbrains/datalore/plot/builder/**/*'
    exclude 'jetbrains/datalore/plot/common/**/*'
    exclude 'jetbrains/datalore/plot/config/**/*'
    exclude 'jetbrains/datalore/plot/server/**/*'
    exclude 'jetbrains/datalore/plot/testing/**/*'
    exclude 'jetbrains/datalore/plot/*.class'
    exclude 'jetbrains/datalore/vis/**/*'
    exclude 'jetbrains/datalore/vis/**/*'

    // lets-plot JavaFX renderer resource.
    exclude 'svgMapper/**/*'

    // Ktor
    exclude 'io/ktor/**/*'
    exclude 'DebugProbesKt.bin'
    exclude 'Empty.class'
}

task jarLetsPlotGISSources(type: ShadowJar) {
    group project.letsPlotTaskGroup
    archiveBaseName = artifactBaseName
    archiveVersion = artifactVersion
    classifier 'sources'
    configurations = [rootProject.configurations.letsPlotJvmBatikSources]
}

publishing {
    publications {
        letsPlotGIS(MavenPublication) {
            groupId artifactGroupId
            artifactId artifactBaseName
            version artifactVersion

            artifact jarLetsPlotGISClasses
            artifact jarLetsPlotGISSources
            artifact rootProject.jarJavaDocs

            pom {
                name = "Lets-Plot GIS"
                description = "Interactive map and Geocoding related modules."
                url = "https://github.com/JetBrains/lets-plot"
                licenses {
                    license {
                        name = "MIT"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                developers {
                    developer {
                        id = "jetbrains"
                        name = "JetBrains"
                        email = "lets-plot@jetbrains.com"
                    }
                }
                scm {
                    url = "https://github.com/JetBrains/lets-plot"
                }
                withXml {
                    def deps = asNode().appendNode('dependencies')
                    // Note: requires "lets-plot-common" or "lets-plot-batik" or "lets-plot-jfx" artifacts at run-time.

                    // Ktor
                    def dep = deps.appendNode('dependency')
                    dep.appendNode('groupId', 'io.ktor')
                    dep.appendNode('artifactId', 'ktor-client-websockets')
                    dep.appendNode('version', ktor_version)
                    dep = deps.appendNode('dependency')
                    dep.appendNode('groupId', 'io.ktor')
                    dep.appendNode('artifactId', 'ktor-client-cio')
                    dep.appendNode('version', ktor_version)

                    // Kotlin HTML
                    dep = deps.appendNode('dependency')
                    dep.appendNode('groupId', 'org.jetbrains.kotlinx')
                    dep.appendNode('artifactId', 'kotlinx-html-jvm')
                    dep.appendNode('version', kotlinx_html_version)

                }
            }
        }
    }
    repositories {
        maven {
            url = project.sonatypeUrl
            credentials {
                username = project.buildSettings?.sonatype?.username
                password = project.buildSettings?.sonatype?.password
            }
        }
        mavenLocal {
            url = uri(project.localMavenRepository)
        }
    }
}

signing {
    sign publishing.publications.letsPlotGIS
}
