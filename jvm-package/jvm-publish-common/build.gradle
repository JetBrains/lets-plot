plugins {
    id "org.jetbrains.kotlin.multiplatform"
    id "maven-publish"
    id "com.github.johnrengelman.shadow"
    id "signing"
}

kotlin {
    jvm()

    sourceSets {
        commonMain {
            dependencies {
                api kotlin('stdlib-common')
                api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

                api project(':base-portable')
                api project(':base')
                api project(':vis-svg-portable')
                api project(':plot-base-portable')
                api project(':plot-base')
                api project(':plot-common-portable')
                api project(':plot-common')
                api project(':plot-builder-portable')
                api project(':plot-builder')
                api project(':plot-config-portable')
                api project(':plot-config')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                // Enable logging to console (make sure it is jared)
                implementation "org.slf4j:slf4j-simple:$slf4j_version"
            }
        }
    }
}


def artifactBaseName = 'lets-plot-common'
def artifactGroupId = project.group
def artifactVersion = project.version

def task_group = 'lets plot'

/*
 * Copyright (c) 2019. JetBrains s.r.o.
 * Use of this source code is governed by the MIT license that can be found in the LICENSE file.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

// https://discuss.kotlinlang.org/t/how-to-publish-fat-jar-from-kotlin-multi-project-mpp/14520
// https://youtrack.jetbrains.com/issue/KT-25709
// https://discuss.kotlinlang.org/t/kotlin-1-3-m2-new-multiplatform-projects-model/9264/107
task jarLetsPlotJvmCommonClasses(type: ShadowJar) {
    group task_group
    archiveBaseName = artifactBaseName
    archiveVersion = artifactVersion
    configurations = [project.configurations.jvmRuntimeClasspath]

    exclude '**/*.kotlin_metadata'
    exclude '**/*.kotlin_module'
    exclude '**/*.kotlin_builtins'

    exclude 'kotlin/**/*'
    exclude 'mu/**/*'      // kotlin logging
    exclude 'org/slf4j/**/*'
    exclude 'org/intellij/lang/annotations/**/*'
    exclude 'org/jetbrains/annotations/**/*'

//    relocate 'com', 'shade.com'
//    relocate 'org', 'shade.org'
//    relocate 'kotlin', 'shade.kotlin'
//    relocate 'mu', 'shade.mu'
}

task jarLetsPlotJvmCommonSources(type: ShadowJar) {
    group task_group
    archiveBaseName = artifactBaseName
    archiveVersion = artifactVersion
    classifier 'sources'
    configurations = [rootProject.configurations.letsPlotJvmCommonSources]
}

task jarLetsPlotJvmJavaDoc(type: Jar) {
    group task_group
    archiveBaseName = artifactBaseName
    archiveVersion = artifactVersion
    classifier 'javadoc'
    from("$rootDir/README.md")
}

publishing {
    publications {
        letsPlotJvmCommon(MavenPublication) {
            groupId artifactGroupId
            artifactId artifactBaseName
            version artifactVersion

            artifact jarLetsPlotJvmCommonClasses
            artifact jarLetsPlotJvmCommonSources
            artifact jarLetsPlotJvmJavaDoc

            pom {
                name = "Lets-Plot common classes"
                description = "Lets-Plot JVM package without rendering part"
                url = "https://github.com/JetBrains/lets-plot"
                licenses {
                    license {
                        name = "MIT"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                developers {
                    developer {
                        id = "jetbrains"
                        name = "JetBrains"
                        email = "lets-plot@jetbrains.com"
                    }
                }
                scm {
                    url = "https://github.com/JetBrains/lets-plot"
                }
                // Dependencies
                withXml {
                    def deps = asNode().appendNode('dependencies')
                    // Kotlin std lib
                    def dep = deps.appendNode('dependency')
                    dep.appendNode('groupId', 'org.jetbrains.kotlin')
                    dep.appendNode('artifactId', 'kotlin-stdlib-jdk8')
                    dep.appendNode('version', kotlin_version)
                    // Kotlin reflection
                    dep = deps.appendNode('dependency')
                    dep.appendNode('groupId', 'org.jetbrains.kotlin')
                    dep.appendNode('artifactId', 'kotlin-reflect')
                    dep.appendNode('version', kotlin_version)
                    // Kotlin test
//                    dep = deps.appendNode('dependency')
//                    dep.appendNode('groupId', 'org.jetbrains.kotlin')
//                    dep.appendNode('artifactId', 'kotlin-test')
//                    dep.appendNode('version', kotlin_version)
//                    dep = deps.appendNode('dependency')
//                    dep.appendNode('groupId', 'org.jetbrains.kotlin')
//                    dep.appendNode('artifactId', 'kotlin-test-junit')
//                    dep.appendNode('version', kotlin_version)
                    // Kotlin logging
                    dep = deps.appendNode('dependency')
                    dep.appendNode('groupId', 'io.github.microutils')
                    dep.appendNode('artifactId', 'kotlin-logging')
                    dep.appendNode('version', kotlinLogging_version)
                    // Console logging
                    dep = deps.appendNode('dependency')
                    dep.appendNode('groupId', 'org.slf4j')
                    dep.appendNode('artifactId', 'slf4j-simple')
                    dep.appendNode('version', slf4j_version)
                }
            }
        }
    }
    repositories {
        maven {
            url = project.sonatypeUrl
            credentials {
                username = project.buildSettings.sonatype.username
                password = project.buildSettings.sonatype.password
            }
        }
        mavenLocal {
            url = uri(project.localMavenRepository)
        }
    }
}

signing {
    sign publishing.publications.letsPlotJvmCommon
    }
