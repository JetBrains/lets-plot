plugins {
    id "org.jetbrains.kotlin.js"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"

    implementation project(':commons')
    implementation project(':platf-w3c')
    implementation project(':datamodel')
    implementation project(':canvas')
    implementation project(':plot-base')
    implementation project(':plot-builder')
    implementation project(':plot-stem')
    implementation project(':gis')
    implementation project(':plot-livemap')
}


kotlin {
    js(LEGACY) {

        target {
            browser {
                dceTask {
                    keep.addAll(
                            "lets-plot-js-package.buildPlotFromRawSpecs",
                            "lets-plot-js-package.buildPlotFromProcessedSpecs",
                            "ktor-ktor-io.\$\$importsForInline\$\$.ktor-ktor-io.io.ktor.utils.io",
                    )
                }
            }
        }
    }
}

def artifact_version = project.js_artifact_version
def dist_dir = "${project.buildDir}/distributions"

task copyProduction() {
    group = project.letsPlotTaskGroup

    doLast {
        def prodTargets = ["lets-plot-latest.min.js", "lets-plot-${artifact_version}.min.js"]

        prodTargets.each { target ->
            copy {
                from "${dist_dir}/js-package.js"
                rename "js-package.js", target
                into dist_dir
            }
        }
    }
}

task copyDevelopment() {
    group = project.letsPlotTaskGroup

    doLast {
        def devTargets = ["lets-plot-latest.js", "lets-plot-${artifact_version}.js"]

        devTargets.each { target ->
            copy {
                from "${project.buildDir}/distributions/js-package.js"
                rename "js-package.js", target
                into dist_dir
            }
        }
    }
}

browserProductionWebpack.finalizedBy copyProduction
browserDevelopmentWebpack.finalizedBy copyDevelopment

//copyProduction.dependsOn(browserProductionWebpack)
//copyProduction.dependsOn(browserDevelopmentWebpack)
//build.dependsOn += copyProduction
build.dependsOn += browserDevelopmentWebpack

task copyForPublish(type: Copy) {
    dependsOn browserDevelopmentWebpack, browserProductionWebpack

    def js_publish_dir = "${rootDir}/js-package/distr"

    from "${dist_dir}/lets-plot-${artifact_version}.js", "${dist_dir}/lets-plot-${artifact_version}.min.js"
    rename("\\-${artifact_version}", "")
    into js_publish_dir
}
