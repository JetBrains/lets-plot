/*
 * Copyright (c) 2022. JetBrains s.r.o.
 * Use of this source code is governed by the MIT license that can be found in the LICENSE file.
 */

package jetbrains.datalore.plot.builder.presentation

import jetbrains.datalore.base.values.Font

object TextWidthEstimator {
    private const val DEFAULT_CHAR_WIDTH = 7.663869264009877
    private const val DEFAULT_FAMILY = "Lucida Grande"
    private const val DEFAULT_FONT_SIZE = 14

    private val CLUSTERS = listOf(
        listOf(' ', 'ґ', '҉', '҈', 'º', '¹', '¸', '·', '´', '²', '°', 'ª', '¨', '¦', 'ј', 'ї', '¡', 'і', '}', '|', '{', 'ѓ', 't', 'r', 'l', 'j', 'i', 'f', 'Ì', '`', 'Í', 'Ï', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'ĵ', 'ĺ', 'ļ', 'ľ', 'ŀ', 'ł', 'ŕ', 'ŗ', 'ř', 'ţ', 'ť', 'ï', 'î', 'í', 'ì', 'ŧ', 'ſ', 'Î', ']', '³', '/', 'ț', ':', 'I', '.', '-', ',', 'Ї', 'ȷ', 'І', '*', 'J', 'г', '(', '\'', '!', ';', '[', '"', ')', '\\'),
        listOf('ū', 'ũ', 'Ť', 'Ţ', 'Ј', 'Ѕ', 'Ŧ', 'Ӏ', 'Ў', 'Ќ', 'л', 'ů', 'ҳ', 'ž', 'Ž', 'ż', 'Ż', 'ź', 'ŭ', 'Ź', 'ŷ', 'Ŷ', 'ҹ', 'ų', 'һ', 'ű', 'Ÿ', 'š', 'ś', 'ş', 'ɉ', 'ɂ', 'ȿ', 'ɍ', 'ĳ', 'Ĵ', 'ķ', 'ĸ', 'Ĺ', 'Ļ', 'Ľ', 'Ŀ', 'Ł', 'ȶ', 'Ɉ', 'ӏ', 'ņ', 'Ş', 'ŝ', 'Ŝ', 'ұ', 'Ś', 'ȳ', 'Š', 'ȴ', 'ő', 'ŏ', 'ō', 'ŋ', 'ŉ', 'ň', 'Ѓ', 'ү', 'ƒ', 'ҩ', 'е', 'я', 'ё', 'ђ', 'ǿ', 'є', 'ѕ', 'д', 'в', 'б', 'а', 'Ȉ', 'ȉ', 'ћ', 'ќ', 'э', 'з', 'ь', 'ъ', 'н', 'о', 'п', 'р', 'с', 'ǰ', 'к', 'Ȋ', 'т', 'й', 'и', 'х', 'ǻ', 'ц', 'ч', 'ǩ', 'у', 'ѝ', 'ȋ', 'ў', 'ƨ', 'Ґ', 'ȝ', 'Ғ', 'ғ', 'ҙ', 'қ', 'ƪ', 'ҝ', 'ҟ', 'К', 'З', 'Г', 'Б', 'Ɨ', 'Ɩ', 'ƚ', 'ҭ', 'ƫ', 'Ț', 'џ', 'ǐ', 'Ǐ', 'ѯ', 'ǃ', 'ȑ', 'ħ', 'ƭ', 'У', 'ǀ', 'ȓ', 'Т', 'Р', 'ș', 'ƾ', 'ƽ', 'ǁ', 'ĥ', 'ń', 'ģ', 'ӻ', 'T', 'S', 'P', 'È', 'É', 'Ê', 'Ë', 'ӷ', 'Ӷ', 'L', 'ӳ', 'F', 'E', 'ԑ', 'ӱ', '¤', 'Ý', 'Þ', 'ß', 'à', 'á', 'â', '?', 'ã', 'ä', 'å', '>', 'ç', 'è', '×', 'Y', 'Z', '¿', '¥', '§', '¢', '«', '~', '¬', 'z', 'y', 'x', 'v', 'u', 's', '¯', 'q', '±', 'p', 'µ', '^', '_', 'a', 'b', 'c', 'd', 'é', 'e', 'h', 'k', 'n', 'o', '»', '¶', 'g', 'ê', 'ӯ', '7', 'ā', '8', 'ă', '6', '5', 'ą', '4', 'ć', '3', '2', 'ĉ', '1', 'ċ', '0', 'č', '+', 'đ', 'ē', 'ӟ', 'ĕ', 'ė', 'ę', 'ě', 'ĝ', 'ә', 'ğ', 'ġ', '$', '#', '9', '<', '£', '=', 'þ', 'ù', 'ô', '÷', 'ö', 'ø', 'ÿ', 'ó', 'û', 'ü', 'ò', 'ý', 'ñ', 'ð', 'ë', 'ú', 'õ'),
        listOf('ш', 'Ԥ', 'ԏ', 'ф', 'Ђ', 'Ѐ', 'Ё', 'ы', 'ɏ', 'Ɏ', 'Ԭ', 'Ɍ', 'ю', 'ѐ', 'ԭ', 'Ԏ', 'ɋ', 'Й', 'И', 'Ɋ', 'щ', 'Л', 'Н', 'м', 'Ь', 'Ѝ', 'В', 'Џ', 'ԛ', 'ԝ', 'С', 'А', 'Ъ', 'Ч', 'Ц', 'Х', 'Ф', 'ԟ', 'Ԟ', 'Э', 'Ћ', 'Я', 'Ԩ', 'ԧ', 'Є', 'Ԧ', 'Ԑ', 'О', 'Ԓ', 'ж', 'ԓ', 'П', 'ԥ', 'ԕ', 'ԗ', 'Д', 'Ԛ', 'ԩ', 'Е', 'ҁ', 'ԍ', 'ӆ', 'Ӆ', 'ӄ', 'Ӄ', 'ӂ', 'ҿ', 'ӫ', 'ҽ', 'Һ', 'Ӭ', 'ӭ', 'Ӯ', 'Ӱ', 'Ҹ', 'ҷ', 'Ҷ', 'ҵ', 'Ҳ', 'Ұ', 'Ӳ', 'Ү', 'Ҭ', 'ҫ', 'Ӈ', 'ӈ', 'Ӫ', 'Ӊ', 'ӓ', 'ӗ', 'Ә', 'Ӛ', 'ӛ', 'ӝ', 'Ӓ', 'Ӟ', 'ӑ', 'Ӡ', 'ӡ', 'Ҫ', 'Ӣ', 'Ӥ', 'ӥ', 'Ӑ', 'Ӧ', 'ӧ', 'ӎ', 'Ө', 'ӌ', 'Ӌ', 'ө', 'ӊ', 'ӣ', 'њ', 'Ӵ', 'ҥ', 'Ӗ', 'Ҁ', 'ѿ', 'ѻ', 'ѷ', 'Ѷ', 'ѵ', 'Ѵ', 'ԇ', 'ѳ', 'Ѳ', 'ѱ', 'Ѱ', 'Ѯ', 'ѫ', 'ѩ', 'ѧ', 'Ѧ', 'ѥ', 'ѣ', 'Ѣ', 'Ԍ', 'ѡ', '҂', 'Ԇ', 'ԁ', 'Ҋ', 'ң', 'ӵ', 'Ң', 'ҡ', 'Ҡ', 'Ҟ', 'Ҝ', 'Қ', 'ӹ', 'Ҙ', 'җ', 'Ҩ', 'ҕ', 'Ӻ', 'Ӽ', 'ӽ', 'Ӿ', 'ҏ', 'ӿ', 'Ԁ', 'Ҏ', 'ҍ', 'Ҍ', 'ҋ', 'Ҕ', 'ɇ', 'Ǟ', 'Ʌ', 'Ǝ', 'ƍ', 'ƌ', 'Ƌ', 'Ɗ', 'Ɖ', 'ƈ', 'Ƈ', 'Ɔ', 'ƅ', 'Ƅ', 'ƃ', 'Ƃ', 'Ə', 'Ɓ', 'ŵ', 'Ų', 'Ű', 'Ů', 'Ŭ', 'Ū', 'Ũ', 'Ř', 'Ŗ', 'Ŕ', 'Ő', 'Ŏ', 'Ō', 'ƀ', 'Ŋ', 'Ɛ', 'Ɠ', 'Ƹ', 'Ʒ', 'ƶ', 'Ƶ', 'ƴ', 'Ƴ', 'Ʋ', 'Ʊ', 'ư', 'Ư', 'Ʈ', 'Ƭ', 'Ʃ', 'Ƒ', 'Ƨ', 'ƥ', 'Ƥ', 'ƣ', 'Ɇ', 'ơ', 'Ơ', 'Ɵ', 'ƞ', 'Ɲ', 'ƛ', 'ƙ', 'Ƙ', 'Ɣ', 'Ʀ', 'ƹ', 'Ň', 'Ń', 'Ò', 'Ñ', 'Ð', 'Ç', 'Å', 'Ä', 'Ã', 'Â', 'Á', 'À', '®', '©', 'w', 'Ó', 'X', 'U', 'R', 'Q', 'O', 'N', 'K', 'H', 'G', 'D', 'C', 'B', 'A', '&', 'V', 'Ņ', 'Ô', 'Ö', 'Ķ', 'Ĳ', 'Ħ', 'Ĥ', 'Ģ', 'Ġ', 'Ğ', 'Ĝ', 'Ě', 'Ę', 'Ė', 'Ĕ', 'Ē', 'Õ', 'Đ', 'Ď', 'Č', 'Ċ', 'Ĉ', 'Ć', 'Ą', 'Ă', 'Ā', 'Ü', 'Û', 'Ú', 'Ù', 'Ø', 'ď', 'ƺ', 'ԯ', 'Ƽ', 'Ȇ', 'ȅ', 'Ȅ', 'ƻ', 'ȃ', 'Ȃ', 'ȁ', 'Ȁ', 'Ǿ', 'ǽ', 'Ǻ', 'ȇ', 'ǹ', 'Ƿ', 'ǵ', 'Ǵ', 'Ȯ', 'ǯ', 'ȯ', 'Ǯ', 'ǭ', 'Ǭ', 'ǫ', 'Ǫ', 'Ǹ', 'Ǩ', 'Ȍ', 'Ȭ', 'ȧ', 'Ȧ', 'ȥ', 'Ȥ', 'ȣ', 'ȩ', 'Ȣ', 'ȡ', 'Ƞ', 'ȟ', 'Ȟ', 'ȭ', 'Ȫ', 'Ȝ', 'Ș', 'ȗ', 'Ȗ', 'ȕ', 'Ȕ', 'Ȓ', 'Ȑ', 'ȏ', 'Ȏ', 'ȍ', 'ȫ', 'Ȱ', 'Ȩ', 'Ǧ', 'Ǘ', 'ǖ', 'ǧ', 'ǔ', 'Ǔ', 'ǒ', 'Ǒ', 'ǎ', 'Ǎ', 'Ⱥ', 'Ȼ', 'ȼ', 'ǉ', 'Ƚ', 'Ⱦ', 'ɀ', 'Ɂ', 'ǂ', 'Ƀ', 'ƿ', 'Ʉ', 'ǘ', 'Ǚ', 'Ǖ', 'ȱ', 'ǜ', 'ǟ', 'Ǡ', 'Ȳ', 'ǡ', 'Ԯ', 'ǝ', 'Ǜ', 'ǥ', 'ȵ', 'ǚ', 'Ǥ'),
        listOf('Ԫ', '@', 'W', 'ԫ', 'Æ', '%', 'ԣ', 'Ԣ', 'ԡ', 'Ԡ', 'Ԅ', 'Ԝ', 'M', 'Ԗ', 'ȸ', '½', 'ԃ', 'Ԙ', '¼', 'Ԕ', 'Ԃ', 'Ԉ', '¾', 'Њ', 'ԙ', 'ȹ', 'ԉ', 'Ԋ', 'ԋ', 'ԅ', 'Љ', 'm', 'ӕ', 'Ж', 'љ', 'Ɯ', 'Ѡ', 'Җ', 'Ѥ', 'ǌ', 'ǋ', 'Ǌ', 'Ѩ', 'Ѫ', 'ǈ', 'Ѭ', 'ѭ', 'Ǉ', 'ǆ', 'ǅ', 'Ǆ', 'Ѿ', 'ѽ', 'Ѽ', 'Ѻ', 'ѹ', 'Ѹ', 'ƕ', 'Ӹ', 'Ҥ', 'ҧ', 'М', 'æ', 'Ш', 'Щ', 'Ӝ', 'Ы', 'Ю', 'Ӕ', 'Ӎ', 'Ǽ', 'Œ', 'œ', 'Ƕ', 'ǳ', 'Ӂ', 'ǲ', 'Ǳ', 'Ҿ', 'Ҽ', 'Ŵ', 'Ҵ', 'ǣ', 'Ǣ', 'Ҧ', 'Ƣ')
    )

    private val CLUSTER_WIDTH = listOf(
        5.267064129494624,
        10.306123828026017,
        13.44090338770389,
        16.320833333333333
    )

    private val FAMILY_COEFFICIENT = mapOf(
        "Arial" to 0.25569589884773175,
        "Calibri" to -0.5889716636856821,
        "Garamond" to -1.0662084071178235,
        "Geneva" to 0.25569589884773175,
        "Georgia" to 0.234209574458996,
        "Helvetica" to 0.25569589884773175,
        "Lucida Grande" to 0.25569589884773175,
        "Rockwell" to 0.5850274101714956,
        "Times New Roman" to -1.0328361695848673,
        "Verdana" to 1.4721292074497387
    )

    private const val SIZE_COEFFICIENT = 0.9829206642847693

    private const val SHIFT_COEFFICIENT = 1.4184673509026706

    private fun getCharWidth(char: Char): Double {
        val clusterId = CLUSTERS.indexOfFirst { char in it }
        return if (clusterId != -1) CLUSTER_WIDTH[clusterId] else DEFAULT_CHAR_WIDTH
    }

    private fun getFamilyCoefficient(font: Font): Double {
        val fontFamily = font.family.toString()
        val defaultFamilyCoefficient = FAMILY_COEFFICIENT[DEFAULT_FAMILY] ?: 0.0
        return FAMILY_COEFFICIENT[fontFamily] ?: defaultFamilyCoefficient
    }

    private fun getFaceCoefficient(font: Font): Double {
        return when {
            font.isBold && font.isItalic -> 0.9172120995070999
            font.isBold && !font.isItalic -> 0.6908238890181602
            !font.isBold && font.isItalic -> 0.1783188620736738
            else -> -2.892855687314002e-17
        }
    }

    private fun getSizeCoefficient(font: Font): Double {
        return SIZE_COEFFICIENT * font.size / DEFAULT_FONT_SIZE
    }

    private fun correctPrediction(predictedWidth: Double, textLength: Int, font: Font): Double {
        return (
            predictedWidth + textLength * (getFamilyCoefficient(font) + getFaceCoefficient(font))
        ) * getSizeCoefficient(font) + textLength * SHIFT_COEFFICIENT
    }

    fun textWidth(text: String, font: Font): Double {
        if (text.isEmpty()) return 0.0
        return correctPrediction(text.map(this::getCharWidth).sum(), text.length, font)
    }

    fun textWidthByLength(textLength: Int, font: Font): Double {
        if (textLength == 0) return 0.0
        return correctPrediction(textLength * DEFAULT_CHAR_WIDTH, textLength, font)
    }
}