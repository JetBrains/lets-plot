plugins {
    id "org.jetbrains.kotlin.multiplatform"
    id "org.jetbrains.gradle.plugin.idea-ext"
}

kotlin {
    jvm()
    jvm("jvmJfx")
    jvm("jvmRawJfx")
    jvm("jvmRawAwt")
    jvm("jvmBrowser")
    jvm("jvmJfxPlot")
    jvm("jvmBatikPlot")
    js(LEGACY) {
        browser {
            dceTask {
                keep.addAll(
                        "ktor-ktor-io.\$\$importsForInline\$\$.ktor-ktor-io.io.ktor.utils.io",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.barsDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.emptyLiveMapDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.featuresDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.linesDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.pathsDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.piesDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.pointsDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.polygonsDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.rasterTilesDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.solidColorTilesDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.rectDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.demo.textDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.canvasDemo.pathDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.canvasDemo.polygonDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.canvasDemo.drawImageDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.canvasDemo.scaleRotateTranslateDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.canvasDemo.lineJoinLineCapDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.canvasDemo.fillRectStrokeRectDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.canvasDemo.lineDashDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.canvasDemo.textAlignAndBaselineDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.canvasDemo.textStyleDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.canvasDemo.sectorDemo",
                        "lets-plot-livemap-demo.jetbrains.livemap.canvasDemo.saveRestoreDemo",
                )
            }
        }
    }


    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation project(':commons')
                implementation project(':datamodel')
                implementation project(':plot-base')
                implementation project(':plot-builder')
                implementation project(':plot-stem')
                implementation project(':canvas')
                implementation project(':vis-demo-common')
                implementation project(':gis')
                implementation project(':livemap')
                implementation project(':plot-livemap')
                implementation project(':demo-and-test-shared')
            }
        }
        allJvm {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                compileOnly "io.github.microutils:kotlin-logging-jvm:$kotlinLogging_version"
                implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:${kotlinx_html_version}"
                implementation "io.ktor:ktor-client-cio:$ktor_version"
                implementation "org.slf4j:slf4j-simple:$slf4j_version"  // Enable logging to console
                implementation("org.openjfx:javafx-base:$jfx_version:${jfx_platform()}")
                implementation("org.openjfx:javafx-controls:$jfx_version:${jfx_platform()}")
                implementation("org.openjfx:javafx-graphics:$jfx_version:${jfx_platform()}")
                implementation("org.openjfx:javafx-swing:$jfx_version:${jfx_platform()}")
            }
        }
//        jvmMain {
//            dependsOn allJvm
//            dependencies {
//            }
//        }

        jvmJfxMain {
            dependsOn allJvm
            dependencies {
                implementation project(':platf-jfx-swing')
            }
        }

        jvmJfxPlotMain {
            dependsOn allJvm
            dependencies {
                implementation project(':platf-jfx-swing')
                implementation project(':vis-demo-common-jfx')
            }
        }

        jvmBatikPlotMain {
            dependsOn allJvm
            dependencies {
                implementation project(':vis-demo-common-batik')
                implementation project(':platf-batik')
            }
        }

        jvmRawJfxMain {
            dependsOn allJvm
            dependencies {
                implementation project(':platf-jfx-swing')
            }
        }

        jvmRawAwtMain {
            dependsOn allJvm
            dependencies {
                implementation project(':platf-awt')
            }
        }

        jvmBrowserMain {
            dependsOn allJvm
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')

                implementation project(':platf-w3c')
            }
        }
    }
}

idea {
    module {
        settings {
            packagePrefix["src/jvmJfxMain/kotlin"] = ""
            packagePrefix["src/jvmBrowserMain/kotlin"] = "jetbrains"
        }
    }
}
