/*
 * Copyright (c) 2025. JetBrains s.r.o.
 * Use of this source code is governed by the MIT license that can be found in the LICENSE file.
 */

package org.jetbrains.letsPlot.core.plot.export

import demoAndTestShared.AwtBitmapIO
import demoAndTestShared.AwtTestCanvasProvider
import demoAndTestShared.ImageComparer
import demoAndTestShared.parsePlotSpec
import org.jetbrains.letsPlot.commons.geometry.DoubleVector
import org.jetbrains.letsPlot.commons.values.awt.BitmapUtil
import org.jetbrains.letsPlot.core.spec.Option
import org.jetbrains.letsPlot.core.spec.getMap
import org.jetbrains.letsPlot.core.util.PlotExportCommon.SizeUnit
import org.junit.BeforeClass
import java.awt.Font
import java.awt.FontFormatException
import java.awt.GraphicsEnvironment
import java.io.IOException
import java.io.InputStream
import javax.imageio.ImageIO
import kotlin.test.Test

class RibbonGeomTest {

    private fun MutableMap<String, Any>.themeTextNotoSans(): MutableMap<String, Any> {
        val theme = getMap("theme") ?: emptyMap()
        this[Option.Plot.THEME] =  theme + mapOf(
            "text" to mapOf(
                "blank" to false,
                "family" to "Noto Sans"
            ),
            "axis_title_y" to mapOf(
                "blank" to true // hide rotated text - antialiasing may cause image differences
            )
        )
        return this
    }

    private fun createImageComparer(): ImageComparer {
        return ImageComparer(
            canvasProvider = AwtTestCanvasProvider(),
            bitmapIO = AwtBitmapIO,
            expectedDir = System.getProperty("user.dir") + "/src/jvmTest/resources/expected/",
            outDir = System.getProperty("user.dir") + "/build/reports/"
        )
    }

    private val imageComparer by lazy { createImageComparer() }

    private fun assertPlot(
        expectedFileName: String,
        plotSpec: MutableMap<String, Any>,
        width: Number? = null,
        height: Number? = null,
        unit: SizeUnit? = null,
        dpi: Number? = null,
        scale: Number? = null
    ) {
        val plotSize = if (width != null && height != null) DoubleVector(width, height) else null

        val imageData = PlotImageExport.buildImageFromRawSpecs(
            plotSpec = plotSpec,
            format = PlotImageExport.Format.PNG,
            scalingFactor = scale ?: 1.0,
            targetDPI = dpi,
            plotSize = plotSize,
            unit = unit
        )
        val image = ImageIO.read(imageData.bytes.inputStream())
        val bitmap = BitmapUtil.fromBufferedImage(image)


        imageComparer.assertBitmapEquals(expectedFileName, bitmap)
    }

    @Test
    fun `#1 example from alternating_ribbon_fill`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "x": [ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0 ],
            |    "min": [ 0.0, 1.996668332936563, 3.9733866159012243, 5.910404133226791, 7.788366846173011, 9.58851077208406, 11.292849467900707, 12.88435374475382, 12.461717634766496, 9.96944288207913, 7.145452532716231, 4.068009347357131, 0.8224001611973444, -2.5014277159033815, -5.811359257509707, -9.015664553792398, -12.025540971766896, -14.757574190337039, -17.136049906158565, -19.09505214477679, -20.580290025415245, -21.55060235330194, -21.979098341958565, -21.853902852003053, -21.17848549326277, -19.971564469614595, -18.2665878313516, -16.110806511407837, -13.563964834886178, -10.696644792501543, -7.588309963978517, -4.325103301204593, -1.1674828685516017, -3.1549138828649643, -5.1108220405366245, -7.015664553792397, -8.85040886589705, -10.596722818169868, -12.237157818854378, -13.755323183679476, -15.136049906158565, -16.365542221288205, -17.431515448271764, -18.323318734989098, -19.03204147779032, -19.55060235330194, -19.87382007266929, -19.998465151282016, -19.923292176716814, -19.649052252486648, -19.17848549326277, -18.51629364655465, -17.66909311440306, -16.645348844478026, -15.455289751119743, -15.513629161156578, -17.772325644464484, -19.5939151994334, -20.92791513676216, -21.73735559999749 ],
            |    "max": [ 14.829419696157931, 16.3888995850751, 17.438758027266253, 17.94989973208109, 17.9081591550353, 17.314693075149993, 16.185948536513635, 14.553207042519208, 14.347121817990455, 15.666538192549668, 16.82941969615793, 17.82414720122871, 18.640781719344524, 19.27116370834386, 19.708994599769202, 19.94989973208109, 19.9914720608301, 19.833296209049372, 19.476952617563903, 18.926001753748288, 18.185948536513635, 17.264187332977475, 16.169928076391802, 14.914104243534405, 13.50926361102302, 11.96944288207913, 10.310027436429284, 8.547597604676596, 6.699763003118102, 4.784986584279649, 2.8224001611973444, 0.8316132486658099, -0.9974598023565455, 2.302399761756311, 5.4830246114243995, 8.45626838259359, 11.139731974375781, 13.459047119569663, 15.34993739237612, 16.759999535494778, 17.650155739727463, 17.995736628284423, 17.787164932467636, 17.030220911660013, 15.745882161893906, 13.969742252469805, 11.751024302261207, 9.151216832994617, 6.2423697048351325, 3.1050973599303537, -0.17365528890501403, -3.503022409236186, -6.790735462606318, -9.945680292079246, -12.880422217787395, -14.110806511407839, -12.625332757446433, -11.013710851952752, -9.292043588275147, -7.4775332966047205 ],
            |    "label": [ "b", "b", "b", "b", "b", "b", "b", "b", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "a", "a", "a", "a", "a" ]
            |  },
            |  "mapping": {
            |    "x": "x",
            |    "ymin": "min",
            |    "ymax": "max",
            |    "fill": "label",
            |    "color": "label"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "int",
            |        "column": "x"
            |      },
            |      {
            |        "type": "float",
            |        "column": "min"
            |      },
            |      {
            |        "type": "float",
            |        "column": "max"
            |      },
            |      {
            |        "type": "str",
            |        "column": "label"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "ribbon",
            |      "mapping": {},
            |      "data_meta": {},
            |      "alpha": 0.2
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("ribbon_geom_1.png", plotSpec)
    }

    @Test
    fun `#2 example from alternating_ribbon_fill`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "x": [ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0 ],
            |    "min": [ 0.0, 1.996668332936563, 3.9733866159012243, 5.910404133226791, 7.788366846173011, 9.58851077208406, 11.292849467900707, 12.88435374475382, 12.461717634766496, 9.96944288207913, 7.145452532716231, 4.068009347357131, 0.8224001611973444, -2.5014277159033815, -5.811359257509707, -9.015664553792398, -12.025540971766896, -14.757574190337039, -17.136049906158565, -19.09505214477679, -20.580290025415245, -21.55060235330194, -21.979098341958565, -21.853902852003053, -21.17848549326277, -19.971564469614595, -18.2665878313516, -16.110806511407837, -13.563964834886178, -10.696644792501543, -7.588309963978517, -4.325103301204593, -1.1674828685516017, -3.1549138828649643, -5.1108220405366245, -7.015664553792397, -8.85040886589705, -10.596722818169868, -12.237157818854378, -13.755323183679476, -15.136049906158565, -16.365542221288205, -17.431515448271764, -18.323318734989098, -19.03204147779032, -19.55060235330194, -19.87382007266929, -19.998465151282016, -19.923292176716814, -19.649052252486648, -19.17848549326277, -18.51629364655465, -17.66909311440306, -16.645348844478026, -15.455289751119743, -15.513629161156578, -17.772325644464484, -19.5939151994334, -20.92791513676216, -21.73735559999749 ],
            |    "max": [ 14.829419696157931, 16.3888995850751, 17.438758027266253, 17.94989973208109, 17.9081591550353, 17.314693075149993, 16.185948536513635, 14.553207042519208, 14.347121817990455, 15.666538192549668, 16.82941969615793, 17.82414720122871, 18.640781719344524, 19.27116370834386, 19.708994599769202, 19.94989973208109, 19.9914720608301, 19.833296209049372, 19.476952617563903, 18.926001753748288, 18.185948536513635, 17.264187332977475, 16.169928076391802, 14.914104243534405, 13.50926361102302, 11.96944288207913, 10.310027436429284, 8.547597604676596, 6.699763003118102, 4.784986584279649, 2.8224001611973444, 0.8316132486658099, -0.9974598023565455, 2.302399761756311, 5.4830246114243995, 8.45626838259359, 11.139731974375781, 13.459047119569663, 15.34993739237612, 16.759999535494778, 17.650155739727463, 17.995736628284423, 17.787164932467636, 17.030220911660013, 15.745882161893906, 13.969742252469805, 11.751024302261207, 9.151216832994617, 6.2423697048351325, 3.1050973599303537, -0.17365528890501403, -3.503022409236186, -6.790735462606318, -9.945680292079246, -12.880422217787395, -14.110806511407839, -12.625332757446433, -11.013710851952752, -9.292043588275147, -7.4775332966047205 ],
            |    "label": [ "a1", "a1", "a1", "a1", "a1", "a1", "a1", "a1", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a4", "a4", "a4", "a4", "a4" ]
            |  },
            |  "mapping": {
            |    "x": "x",
            |    "ymin": "min",
            |    "ymax": "max",
            |    "color": "label",
            |    "fill": "label"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "int",
            |        "column": "x"
            |      },
            |      {
            |        "type": "float",
            |        "column": "min"
            |      },
            |      {
            |        "type": "float",
            |        "column": "max"
            |      },
            |      {
            |        "type": "str",
            |        "column": "label"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [
            |    {
            |      "aesthetic": "fill",
            |      "breaks": [
            |        1.0,
            |        2.0
            |      ],
            |      "labels": [
            |        "b",
            |        "a"
            |      ],
            |      "values": [
            |        "#e41a1c",
            |        "#377eb8"
            |      ]
            |    },
            |    {
            |      "aesthetic": "color",
            |      "breaks": [
            |        1.0,
            |        2.0
            |      ],
            |      "labels": [
            |        "b",
            |        "a"
            |      ],
            |      "values": [
            |        "#e41a1c",
            |        "#377eb8"
            |      ]
            |    }
            |  ],
            |  "layers": [
            |    {
            |      "geom": "ribbon",
            |      "mapping": {},
            |      "data_meta": {},
            |      "alpha": 0.2
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("ribbon_geom_2.png", plotSpec)
    }

    @Test
    fun `#3 example from alternating_ribbon_fill`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "x": [ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 55.0, 56.0, 57.0, 58.0, 59.0 ],
            |    "min": [ 0.0, 1.996668332936563, 3.9733866159012243, 5.910404133226791, 7.788366846173011, 9.58851077208406, 11.292849467900707, 12.88435374475382, 12.461717634766496, 12.461717634766496, 9.96944288207913, 7.145452532716231, 4.068009347357131, 0.8224001611973444, -2.5014277159033815, -5.811359257509707, -9.015664553792398, -12.025540971766896, -14.757574190337039, -17.136049906158565, -19.09505214477679, -20.580290025415245, -21.55060235330194, -21.979098341958565, -21.853902852003053, -21.17848549326277, -19.971564469614595, -18.2665878313516, -16.110806511407837, -13.563964834886178, -10.696644792501543, -7.588309963978517, -4.325103301204593, -1.1674828685516017, -1.1674828685516017, -3.1549138828649643, -5.1108220405366245, -7.015664553792397, -8.85040886589705, -10.596722818169868, -12.237157818854378, -13.755323183679476, -15.136049906158565, -16.365542221288205, -17.431515448271764, -18.323318734989098, -19.03204147779032, -19.55060235330194, -19.87382007266929, -19.998465151282016, -19.923292176716814, -19.649052252486648, -19.17848549326277, -18.51629364655465, -17.66909311440306, -16.645348844478026, -15.455289751119743, -15.513629161156578, -15.513629161156578, -17.772325644464484, -19.5939151994334, -20.92791513676216, -21.73735559999749 ],
            |    "max": [ 14.829419696157931, 16.3888995850751, 17.438758027266253, 17.94989973208109, 17.9081591550353, 17.314693075149993, 16.185948536513635, 14.553207042519208, 14.347121817990455, 14.347121817990455, 15.666538192549668, 16.82941969615793, 17.82414720122871, 18.640781719344524, 19.27116370834386, 19.708994599769202, 19.94989973208109, 19.9914720608301, 19.833296209049372, 19.476952617563903, 18.926001753748288, 18.185948536513635, 17.264187332977475, 16.169928076391802, 14.914104243534405, 13.50926361102302, 11.96944288207913, 10.310027436429284, 8.547597604676596, 6.699763003118102, 4.784986584279649, 2.8224001611973444, 0.8316132486658099, -0.9974598023565455, -0.9974598023565455, 2.302399761756311, 5.4830246114243995, 8.45626838259359, 11.139731974375781, 13.459047119569663, 15.34993739237612, 16.759999535494778, 17.650155739727463, 17.995736628284423, 17.787164932467636, 17.030220911660013, 15.745882161893906, 13.969742252469805, 11.751024302261207, 9.151216832994617, 6.2423697048351325, 3.1050973599303537, -0.17365528890501403, -3.503022409236186, -6.790735462606318, -9.945680292079246, -12.880422217787395, -14.110806511407839, -14.110806511407839, -12.625332757446433, -11.013710851952752, -9.292043588275147, -7.4775332966047205 ],
            |    "label": [ "a1", "a1", "a1", "a1", "a1", "a1", "a1", "a1", "a1", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a2", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a3", "a4", "a4", "a4", "a4", "a4" ]
            |  },
            |  "mapping": {
            |    "x": "x",
            |    "ymin": "min",
            |    "ymax": "max",
            |    "color": "label",
            |    "fill": "label"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "int",
            |        "column": "x"
            |      },
            |      {
            |        "type": "float",
            |        "column": "min"
            |      },
            |      {
            |        "type": "float",
            |        "column": "max"
            |      },
            |      {
            |        "type": "str",
            |        "column": "label"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [
            |    {
            |      "aesthetic": "fill",
            |      "breaks": [
            |        1.0,
            |        2.0
            |      ],
            |      "labels": [
            |        "b",
            |        "a"
            |      ],
            |      "values": [
            |        "#e41a1c",
            |        "#377eb8"
            |      ]
            |    },
            |    {
            |      "aesthetic": "color",
            |      "breaks": [
            |        1.0,
            |        2.0
            |      ],
            |      "labels": [
            |        "b",
            |        "a"
            |      ],
            |      "values": [
            |        "#e41a1c",
            |        "#377eb8"
            |      ]
            |    }
            |  ],
            |  "layers": [
            |    {
            |      "geom": "ribbon",
            |      "mapping": {},
            |      "data_meta": {},
            |      "alpha": 0.2
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("ribbon_geom_3.png", plotSpec)
    }

    @Test
    fun `#1 example from documentation geom_ribbon`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "x": [ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0 ],
            |    "ymin": [ -2.0, -1.0, -3.0, -1.0, -1.0, -4.0, -3.0, -3.0, -3.0, -1.0 ],
            |    "ymax": [ 4.0, 3.0, 5.0, 2.0, 4.0, 2.0, 4.0, 5.0, 1.0, 4.0 ]
            |  },
            |  "mapping": {
            |    "x": "x"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "int",
            |        "column": "x"
            |      },
            |      {
            |        "type": "int",
            |        "column": "ymin"
            |      },
            |      {
            |        "type": "int",
            |        "column": "ymax"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "ribbon",
            |      "mapping": {
            |        "ymin": "ymin",
            |        "ymax": "ymax"
            |      },
            |      "data_meta": {}
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("ribbon_geom_4.png", plotSpec)
    }

    @Test
    fun `#2 example from documentation geom_ribbon`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "day": [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0 ],
            |    "tmin": [ 18.503285846988767, 18.861735698828817, 18.35231146189931, 17.476970143591974, 18.765846625276666, 18.76586304305082, 17.42078718449261, 18.23256527084709, 18.53052561406505, 18.457439956414035, 18.536582307187537, 18.53427024642974, 18.758037728433965, 17.0867197553422, 17.275082167486968, 18.437712470759028, 17.987168879665575, 18.685752667404728, 18.09197592447879, 17.58769629866471, 17.534351231078446, 18.774223699513463, 18.932471795312075, 17.575251813786544, 18.45561727547482, 18.889077410290135, 17.8490064225777, 18.624301981654327, 18.399361310081193, 18.708306250206725 ],
            |    "tmax": [ 21.601706612229396, 22.85227818450894, 21.013497224737932, 22.0577109289559, 21.82254491210319, 22.220843649971023, 21.208863595004754, 22.959670123879775, 22.32818604889843, 21.19686123586912, 21.73846657999541, 21.17136828118997, 21.11564828238824, 21.30110369558929, 22.478521990367426, 21.719844208394708, 21.460638770959786, 22.057122226218915, 21.34361828956846, 22.763040155362734, 21.324083969394795, 21.385082280416317, 21.676922000305957, 21.61167628884087, 22.03099952249595, 21.9312801191162, 21.83921752322264, 21.309212375851214, 21.331263431403563, 21.97554512712236 ]
            |  },
            |  "mapping": {},
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "int",
            |        "column": "day"
            |      },
            |      {
            |        "type": "float",
            |        "column": "tmin"
            |      },
            |      {
            |        "type": "float",
            |        "column": "tmax"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "ribbon",
            |      "mapping": {
            |        "x": "day",
            |        "ymin": "tmin",
            |        "ymax": "tmax"
            |      },
            |      "tooltips": {
            |        "formats": [
            |          {
            |            "field": "^ymin",
            |            "format": ".1f"
            |          },
            |          {
            |            "field": "^ymax",
            |            "format": ".1f"
            |          }
            |        ],
            |        "lines": [
            |          "min temp|^ymin",
            |          "max temp|^ymax"
            |        ]
            |      },
            |      "data_meta": {},
            |      "color": "#bd0026",
            |      "fill": "#fd8d3c",
            |      "size": 2.0
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("ribbon_geom_5.png", plotSpec)
    }

    companion object {
        @JvmStatic
        @BeforeClass
        fun setUp() {
            registerFont("NotoSans-Regular.ttf")
            registerFont("NotoSans-Bold.ttf")
            registerFont("NotoSans-Italic.ttf")
            registerFont("NotoSans-BoldItalic.ttf")
            registerFont("NotoSerif-Regular.ttf")
        }

        private fun registerFont(resourceName: String) {
            val fontStream: InputStream? = PlotImageExportVisualTest::class.java.getClassLoader().getResourceAsStream(resourceName)
            try {
                val customFont = Font.createFont(Font.TRUETYPE_FONT, fontStream)
                val ge = GraphicsEnvironment.getLocalGraphicsEnvironment()
                ge.registerFont(customFont)
            } catch (e: FontFormatException) {
                e.printStackTrace()
            } catch (e: IOException) {
                e.printStackTrace()
            } finally {
                if (fontStream != null) {
                    try {
                        fontStream.close()
                    } catch (e: IOException) {
                        e.printStackTrace()
                    }
                }
            }
        }
    }
}