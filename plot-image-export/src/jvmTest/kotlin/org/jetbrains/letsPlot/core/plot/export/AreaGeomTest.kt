/*
 * Copyright (c) 2025. JetBrains s.r.o.
 * Use of this source code is governed by the MIT license that can be found in the LICENSE file.
 */

package org.jetbrains.letsPlot.core.plot.export

import demoAndTestShared.parsePlotSpec
import kotlin.test.Test

class AreaGeomTest : VisualPlotTestBase() {

    @Test
    fun `example from #1295 Incorrectly rendered Area chart`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "kpi_month_la": [ "2021-12-01", "2022-07-01", "2024-10-01", "2021-02-01", "2023-05-01", "2024-10-01", "2024-08-01", "2023-10-01", "2021-09-01", "2022-07-01", "2023-05-01", "2023-03-01", "2024-12-01", "2024-02-01", "2024-05-01", "2024-01-01", "2023-04-01", "2024-08-01", "2022-08-01", "2023-06-01", "2024-03-01", "2024-09-01", "2024-05-01", "2022-05-01", "2021-05-01", "2022-02-01", "2023-05-01", "2020-11-01", "2024-12-01", "2021-05-01", "2022-10-01", "2023-12-01", "2023-09-01", "2023-07-01", "2022-01-01", "2023-01-01", "2023-01-01", "2021-08-01", "2021-03-01", "2025-01-01", "2022-01-01", "2021-07-01", "2021-01-01", "2021-11-01", "2023-04-01", "2022-08-01", "2023-06-01", "2024-08-01", "2024-03-01", "2024-07-01", "2022-05-01", "2021-10-01", "2021-06-01", "2022-01-01", "2020-08-01", "2024-11-01", "2021-03-01", "2021-12-01", "2024-11-01", "2023-07-01", "2021-01-01", "2022-03-01", "2023-02-01", "2022-11-01", "2023-08-01", "2024-07-01", "2022-10-01", "2023-09-01", "2021-05-01", "2025-01-01", "2021-12-01", "2021-07-01", "2022-06-01", "2023-02-01", "2023-10-01", "2022-09-01", "2024-09-01", "2024-04-01", "2020-12-01", "2021-11-01", "2021-11-01", "2020-12-01", "2021-10-01", "2022-09-01", "2023-01-01", "2023-06-01", "2021-08-01", "2023-03-01", "2023-08-01", "2024-01-01", "2025-01-01", "2024-07-01", "2020-10-01", "2020-10-01", "2021-04-01", "2024-04-01", "2023-08-01", "2022-12-01", "2022-05-01", "2025-02-01", "2022-04-01", "2023-03-01", "2023-04-01", "2022-06-01", "2024-06-01", "2022-04-01", "2020-11-01", "2021-02-01", "2025-02-01", "2021-10-01", "2022-02-01", "2024-11-01", "2023-11-01", "2021-09-01", "2021-01-01", "2022-12-01", "2025-02-01", "2022-07-01", "2023-11-01", "2020-10-01", "2023-12-01", "2021-09-01", "2024-01-01", "2023-12-01", "2020-11-01", "2024-06-01", "2021-06-01", "2021-07-01", "2022-06-01", "2024-04-01", "2024-06-01", "2024-03-01", "2020-09-01", "2023-10-01", "2020-09-01", "2021-06-01", "2020-08-01", "2023-07-01", "2022-10-01", "2021-03-01", "2024-02-01", "2022-09-01", "2020-08-01", "2021-04-01", "2023-11-01", "2022-08-01", "2024-10-01", "2023-02-01", "2022-02-01", "2022-11-01", "2024-02-01", "2020-12-01", "2021-02-01", "2022-03-01", "2021-08-01", "2020-09-01", "2024-09-01", "2021-04-01", "2022-12-01", "2022-04-01", "2024-05-01", "2024-12-01", "2023-09-01", "2022-03-01", "2022-11-01" ],
            |    "mau_type": [ "Recurring", "New", "Recurring", "Reactivation", "Reactivation", "Reactivation", "New", "New", "Reactivation", "Reactivation", "New", "New", "Reactivation", "Recurring", "Recurring", "New", "Reactivation", "Reactivation", "Recurring", "Reactivation", "New", "New", "Reactivation", "New", "Recurring", "Reactivation", "Recurring", "New", "New", "Reactivation", "New", "New", "Reactivation", "Recurring", "Recurring", "Recurring", "New", "Recurring", "New", "Recurring", "New", "New", "New", "Reactivation", "Recurring", "New", "Recurring", "Recurring", "Recurring", "Reactivation", "Recurring", "Recurring", "New", "Reactivation", "Recurring", "New", "Recurring", "New", "Recurring", "Reactivation", "Reactivation", "Recurring", "Reactivation", "New", "Reactivation", "New", "Reactivation", "New", "New", "New", "Reactivation", "Recurring", "Recurring", "New", "Reactivation", "New", "Reactivation", "Reactivation", "Reactivation", "Recurring", "New", "Recurring", "Reactivation", "Reactivation", "Reactivation", "New", "New", "Recurring", "New", "Recurring", "Reactivation", "Recurring", "Recurring", "Reactivation", "New", "Recurring", "Recurring", "New", "Reactivation", "Recurring", "Reactivation", "Reactivation", "New", "New", "Recurring", "New", "Recurring", "New", "Reactivation", "New", "Recurring", "Reactivation", "Recurring", "New", "Recurring", "Recurring", "New", "Recurring", "Reactivation", "New", "Reactivation", "Recurring", "Reactivation", "Recurring", "Reactivation", "New", "Recurring", "Reactivation", "Reactivation", "New", "Reactivation", "Reactivation", "Reactivation", "Recurring", "New", "Reactivation", "Reactivation", "New", "Recurring", "Reactivation", "Reactivation", "Recurring", "New", "Reactivation", "New", "Reactivation", "New", "Recurring", "New", "Reactivation", "New", "New", "Recurring", "Reactivation", "Reactivation", "Recurring", "Recurring", "Recurring", "Reactivation", "Recurring", "New", "Recurring", "Recurring", "New", "Recurring" ],
            |    "jobseekers": [ 1162365.0, 1190065.0, 732551.0, 1317867.0, 814874.0, 613342.0, 1305099.0, 1143646.0, 577453.0, 511773.0, 1156265.0, 680625.0, 1466912.0, 809360.0, 988442.0, 711698.0, 1222776.0, 899352.0, 1105206.0, 1248759.0, 1301221.0, 1431471.0, 1213872.0, 812557.0, 1316394.0, 1275166.0, 895746.0, 1085191.0, 1268262.0, 1389919.0, 1080787.0, 1057834.0, 1484887.0, 1253141.0, 1180684.0, 1304890.0, 501796.0, 1210924.0, 1300033.0, 977777.0, 768629.0, 1304785.0, 856455.0, 1320947.0, 521710.0, 1456666.0, 1017024.0, 1436567.0, 1040163.0, 1288415.0, 1343803.0, 1012059.0, 600218.0, 549709.0, 1098479.0, 1262759.0, 585987.0, 1061422.0, 550079.0, 695956.0, 1403395.0, 1078734.0, 854755.0, 550636.0, 1318870.0, 1293598.0, 1147425.0, 593873.0, 552736.0, 573213.0, 532301.0, 1037636.0, 1399078.0, 531170.0, 1101682.0, 845671.0, 1458436.0, 1445043.0, 528752.0, 1057070.0, 1297045.0, 1281610.0, 501419.0, 708081.0, 825023.0, 1075330.0, 941850.0, 1368693.0, 924880.0, 1144404.0, 505084.0, 764710.0, 1175369.0, 925143.0, 1327907.0, 795706.0, 1199906.0, 663313.0, 704349.0, 1002975.0, 553217.0, 1259701.0, 1499210.0, 1336793.0, 671257.0, 947137.0, 770834.0, 1338728.0, 540549.0, 1484469.0, 790041.0, 1253374.0, 591221.0, 891784.0, 1007120.0, 1122461.0, 797204.0, 547867.0, 1262645.0, 680023.0, 614822.0, 1119254.0, 1184884.0, 949255.0, 1352312.0, 1009840.0, 757602.0, 854337.0, 1080759.0, 1341676.0, 1436331.0, 1058345.0, 1437499.0, 826149.0, 823228.0, 1421634.0, 825334.0, 964839.0, 1472693.0, 1042300.0, 1363141.0, 575380.0, 788588.0, 1212278.0, 861552.0, 867746.0, 560191.0, 968070.0, 629300.0, 963798.0, 1129455.0, 1478763.0, 1246120.0, 1200359.0, 870476.0, 1213461.0, 1191109.0, 798877.0, 657746.0, 1339227.0, 762490.0, 877034.0, 1311488.0, 690618.0, 1101986.0 ]
            |  },
            |  "mapping": {
            |    "x": "kpi_month_la",
            |    "y": "jobseekers",
            |    "fill": "mau_type"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "str",
            |        "column": "kpi_month_la"
            |      },
            |      {
            |        "type": "str",
            |        "column": "mau_type"
            |      },
            |      {
            |        "type": "int",
            |        "column": "jobseekers"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "area",
            |      "mapping": {},
            |      "data_meta": {}
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("area_geom_1.png", plotSpec)
    }

    @Test
    fun `#1 example from documentation geom_area`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "x": [ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0 ],
            |    "y": [ 0.3745401188473625, 1.3252544252572787, 2.057248367068684, 2.6559068512657205, 2.811925491708157, 2.9679200120443596, 3.026003624212559, 3.8921797699874943, 4.493294781730703, 5.201367359526748, 5.221951853822551, 6.191861705984546, 7.024304346784968, 7.236643457463244, 7.418468424670345, 7.6018729345237785, 7.906115177483317, 8.430871609115554, 8.86281662775767, 9.154045767955711 ]
            |  },
            |  "mapping": {
            |    "x": "x",
            |    "y": "y"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "int",
            |        "column": "x"
            |      },
            |      {
            |        "type": "float",
            |        "column": "y"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "area",
            |      "mapping": {},
            |      "data_meta": {}
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("area_geom_2.png", plotSpec)
    }

    @Test
    fun `#2 example from documentation geom_area`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "day": [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0 ],
            |    "tmin": [ -1.4967141530112327, -1.1382643011711846, -1.6476885381006925, -2.5230298564080256, -1.234153374723336, -1.2341369569491805, -2.5792128155073915, -1.767434729152909, -1.4694743859349522, -1.5425600435859645, -1.4634176928124623, -1.465729753570257, -1.2419622715660341, -2.913280244657798, -2.7249178325130328, -1.5622875292409728, -2.0128311203344236, -1.314247332595274, -1.9080240755212108, -2.4123037013352917, -2.465648768921554, -1.2257763004865356, -1.0675282046879238, -2.424748186213457, -1.5443827245251827, -1.110922589709866, -2.1509935774223026, -1.375698018345672, -1.600638689918805, -1.2916937497932768 ],
            |    "tmax": [ 1.601706612229397, 2.852278184508938, 1.013497224737934, 2.0577109289559004, 1.8225449121031891, 2.2208436499710222, 1.2088635950047555, 2.959670123879776, 2.3281860488984307, 1.1968612358691235, 1.7384665799954104, 1.1713682811899706, 1.1156482823882405, 1.3011036955892887, 2.4785219903674274, 1.7198442083947088, 1.4606387709597874, 2.0571222262189157, 1.3436182895684614, 2.763040155362734, 1.324083969394795, 1.3850822804163165, 1.6769220003059586, 1.6116762888408678, 2.030999522495951, 1.9312801191161986, 1.8392175232226387, 1.3092123758512146, 1.3312634314035638, 1.9755451271223592 ]
            |  },
            |  "mapping": {},
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "int",
            |        "column": "day"
            |      },
            |      {
            |        "type": "float",
            |        "column": "tmin"
            |      },
            |      {
            |        "type": "float",
            |        "column": "tmax"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "area",
            |      "mapping": {
            |        "x": "day",
            |        "y": "tmin"
            |      },
            |      "tooltips": {
            |        "formats": [
            |          {
            |            "field": "tmin",
            |            "format": ".1f"
            |          },
            |          {
            |            "field": "tmax",
            |            "format": ".1f"
            |          }
            |        ],
            |        "lines": [
            |          "@|@day",
            |          "min temp|@tmin",
            |          "max temp|@tmax"
            |        ]
            |      },
            |      "data_meta": {},
            |      "color": "#0571b0",
            |      "fill": "#92c5de"
            |    },
            |    {
            |      "geom": "area",
            |      "mapping": {
            |        "x": "day",
            |        "y": "tmax"
            |      },
            |      "tooltips": {
            |        "formats": [
            |          {
            |            "field": "tmin",
            |            "format": ".1f"
            |          },
            |          {
            |            "field": "tmax",
            |            "format": ".1f"
            |          }
            |        ],
            |        "lines": [
            |          "@|@day",
            |          "min temp|@tmin",
            |          "max temp|@tmax"
            |        ]
            |      },
            |      "data_meta": {},
            |      "color": "#ca0020",
            |      "fill": "#f4a582"
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("area_geom_3.png", plotSpec)
    }
}