/*
 * Copyright (c) 2025. JetBrains s.r.o.
 * Use of this source code is governed by the MIT license that can be found in the LICENSE file.
 */

package org.jetbrains.letsPlot.core.plot.export

import demoAndTestShared.AwtBitmapIO
import demoAndTestShared.AwtTestCanvasProvider
import demoAndTestShared.ImageComparer
import demoAndTestShared.parsePlotSpec
import org.jetbrains.letsPlot.commons.geometry.DoubleVector
import org.jetbrains.letsPlot.commons.values.awt.BitmapUtil
import org.jetbrains.letsPlot.core.spec.Option
import org.jetbrains.letsPlot.core.spec.getMap
import org.jetbrains.letsPlot.core.util.PlotExportCommon.SizeUnit
import org.junit.BeforeClass
import java.awt.Font
import java.awt.FontFormatException
import java.awt.GraphicsEnvironment
import java.io.IOException
import java.io.InputStream
import javax.imageio.ImageIO
import kotlin.test.Test

class ViolinGeomTest {

    private fun MutableMap<String, Any>.themeTextNotoSans(): MutableMap<String, Any> {
        val theme = getMap("theme") ?: emptyMap()
        this[Option.Plot.THEME] =  theme + mapOf(
            "text" to mapOf(
                "blank" to false,
                "family" to "Noto Sans"
            ),
            "axis_title_y" to mapOf(
                "blank" to true // hide rotated text - antialiasing may cause image differences
            )
        )
        return this
    }

    private fun createImageComparer(): ImageComparer {
        return ImageComparer(
            canvasProvider = AwtTestCanvasProvider(),
            bitmapIO = AwtBitmapIO,
            expectedDir = System.getProperty("user.dir") + "/src/jvmTest/resources/expected/",
            outDir = System.getProperty("user.dir") + "/build/reports/"
        )
    }

    private val imageComparer by lazy { createImageComparer() }

    private fun assertPlot(
        expectedFileName: String,
        plotSpec: MutableMap<String, Any>,
        width: Number? = null,
        height: Number? = null,
        unit: SizeUnit? = null,
        dpi: Number? = null,
        scale: Number? = null
    ) {
        val plotSize = if (width != null && height != null) DoubleVector(width, height) else null

        val imageData = PlotImageExport.buildImageFromRawSpecs(
            plotSpec = plotSpec,
            format = PlotImageExport.Format.PNG,
            scalingFactor = scale ?: 1.0,
            targetDPI = dpi,
            plotSize = plotSize,
            unit = unit
        )
        val image = ImageIO.read(imageData.bytes.inputStream())
        val bitmap = BitmapUtil.fromBufferedImage(image)


        imageComparer.assertBitmapEquals(expectedFileName, bitmap)
    }

    @Test
    fun `example from #1381 support for group aesthetic mapping parameter unclear`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "hp": [ 110.0, 110.0, 93.0, 110.0, 175.0, 105.0, 245.0, 62.0, 95.0, 123.0, 123.0, 180.0, 180.0, 180.0, 205.0, 215.0, 230.0, 66.0, 52.0, 65.0, 97.0, 150.0, 150.0, 245.0, 175.0, 66.0, 91.0, 113.0, 264.0, 175.0, 335.0, 109.0 ],
            |    "cyl": [ 6.0, 6.0, 4.0, 6.0, 8.0, 6.0, 8.0, 4.0, 4.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 4.0, 4.0, 4.0, 4.0, 8.0, 8.0, 8.0, 8.0, 4.0, 4.0, 4.0, 8.0, 6.0, 8.0, 4.0 ],
            |    "gear": [ 4.0, 4.0, 4.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 4.0 ]
            |  },
            |  "mapping": {
            |    "x": "cyl",
            |    "y": "hp"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "int",
            |        "column": "hp"
            |      },
            |      {
            |        "type": "int",
            |        "column": "cyl"
            |      },
            |      {
            |        "type": "int",
            |        "column": "gear"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "violin",
            |      "mapping": {},
            |      "tooltips": "none",
            |      "data_meta": {},
            |      "bw": 20.0
            |    },
            |    {
            |      "geom": "point",
            |      "mapping": {
            |        "color": "gear"
            |      },
            |      "position": {
            |        "name": "jitter",
            |        "width": 0.2,
            |        "height": 0.0,
            |        "seed": 42
            |      },
            |      "data_meta": {
            |        "mapping_annotations": [
            |          {
            |            "parameters": {
            |              "label": "gear"
            |            },
            |            "aes": "color",
            |            "annotation": "as_discrete"
            |          }
            |        ]
            |      }
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("violin_geom_1.png", plotSpec)
    }

    @Test
    fun `#1 example from documentation geom_violin`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "x": [ "c", "a", "c", "c", "a", "a", "c", "b", "c", "c", "c", "c", "a", "c", "b", "a", "b", "b", "b", "b", "a", "a", "b", "b", "a", "a", "a", "c", "c", "c", "b", "c", "b", "b", "c", "b", "c", "c", "a", "c", "a", "c", "c", "a", "a", "c", "b", "a", "b", "b", "b", "a", "b", "a", "b", "c", "c", "a", "c", "c", "b", "a", "b", "b", "b", "b", "b", "b", "b", "a", "c", "b", "b", "b", "b", "b", "b", "c", "c", "b", "c", "a", "b", "a", "a", "b", "c", "a", "b", "a", "a", "a", "a", "c", "a", "a", "a", "c", "a", "a" ],
            |    "y": [ 0.5821227947130392, 0.8877484595933572, 0.8943323301087615, 0.7549977972447358, -0.20716589010457426, -0.62347739498496, -1.5081532895474827, 1.0996469757848204, -0.17773212127065513, -0.41038330868630046, 1.1797163447007009, -0.8982079394556782, 0.8347954192304283, 0.2965613843289707, -1.037829876515482, -0.07580374502818543, 0.9729635337557875, 0.7955954638959417, 1.4954342528834736, 0.3381812519933197, 3.372296253626673, -0.9203908050673758, -0.39863839001520124, -0.060864087474746136, -1.4187504585914028, 1.042491617339421, 0.9035324906258424, 0.019000331062149763, -0.5344164536735052, -1.495053870814336, -0.7892583286979201, 0.7437112837712267, -0.21216142171162652, -0.42686879403972283, 0.5014483315248052, 1.1581866529320277, 0.25711687005627937, 0.3145128958631717, 1.3718621335497765, 0.17555329395483268, -0.30928854644457765, 0.6731255027739751, -0.2566301826925544, -0.36782572413276127, 1.273733620139556, -0.2919526708256201, -2.65517604756347, 0.3455179438887663, -0.39551645158029325, -0.289136856469942, 0.45293632653350946, -0.16606090835106535, 0.214938830094755, -2.022314933195735, -0.9430568084672624, 1.4039587386592935, -0.018550804511640224, -1.6735046219902232, -1.0725318344356576, -0.9925861794031905, 0.10234768254966681, -0.43260928054801323, -0.6591823024364779, 0.003937304431402774, 0.4777540994335271, -0.25902864473889053, -0.5747092076133995, -0.42149822033988354, 0.33982096418664376, -0.0073801499445730065, 0.767296838706404, -1.1497925774943585, -0.7753361059569441, 0.7731408558892489, -0.8018278433496938, 1.3840157189326783, 1.405205305878188, 1.392325753491903, -0.8806408185297693, 0.07689494858457142, -0.49343248220332664, 0.9231626083419529, 1.706604953678462, 0.8735894156353792, 0.009144345740137364, -0.3655392968325427, 0.6490867326291062, -1.2228735366753067, 0.5363360323820653, -0.9146909312612774, 0.6205482159617352, -0.16093737686306336, -0.38826439897661413, -0.8855123738288486, -0.35674502576819417, 0.5561217985339653, 1.043860610918658, 0.5264481613346957, 1.3638865244171052, 2.5391627162693324 ]
            |  },
            |  "mapping": {
            |    "x": "x",
            |    "y": "y"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "str",
            |        "column": "x"
            |      },
            |      {
            |        "type": "float",
            |        "column": "y"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "violin",
            |      "mapping": {},
            |      "data_meta": {}
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("violin_geom_2.png", plotSpec)
    }

    @Test
    fun `#2 example from documentation geom_violin`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "x": [ "b", "c", "a", "b", "b", "c", "a", "a", "b", "b", "b", "b", "b", "b", "c", "a", "c", "c", "c", "b", "b", "a", "b", "c", "c", "b", "b", "b", "c", "c", "a", "a", "c", "b", "b", "a", "c", "a", "a", "b", "b", "b", "b", "c", "c", "c", "c", "b", "b", "b", "b", "b", "b", "c", "b", "c", "c", "a", "b", "a", "b", "b", "a", "a", "b", "b", "c", "a", "c", "b", "b", "b", "a", "b", "a", "b", "c", "c", "b", "c", "b", "c", "a", "c", "b", "b", "b", "a", "c", "b", "c", "c", "b", "b", "b", "b", "b", "c", "b", "a" ],
            |    "y": [ 0.7384665799954104, 0.1713682811899705, -0.11564828238824053, -0.3011036955892888, -1.4785219903674274, -0.7198442083947086, -0.4606387709597875, 1.0571222262189157, 0.3436182895684614, -1.763040155362734, 0.324083969394795, -0.38508228041631654, -0.6769220003059587, 0.6116762888408679, 1.030999522495951, 0.9312801191161986, -0.8392175232226385, -0.3092123758512146, 0.33126343140356396, 0.9755451271223592, -0.47917423784528995, -0.18565897666381712, -1.1063349740060282, -1.1962066240806708, 0.812525822394198, 1.356240028570823, -0.07201012158033385, 1.0035328978920242, 0.36163602504763415, -0.6451197546051243, 0.36139560550841393, 1.5380365664659692, -0.03582603910995154, 1.5646436558140062, -2.6197451040897444, 0.8219025043752238, 0.08704706823817122, -0.29900735046586746, 0.0917607765355023, -1.9875689146008928, -0.21967188783751193, 0.3571125715117464, 1.477894044741516, -0.5182702182736474, -0.8084936028931876, -0.5017570435845365, 0.9154021177020741, 0.32875110965968446, -0.5297602037670388, 0.5132674331133561, 0.09707754934804039, 0.9686449905328892, -0.7020530938773524, -0.3276621465977682, -0.39210815313215763, -1.4635149481321186, 0.29612027706457605, 0.26105527217988933, 0.00511345664246089, -0.23458713337514692, -1.4153707420504142, -0.42064532276535904, -0.3427145165267695, -0.8022772692216189, -0.16128571166600914, 0.4040508568145384, 1.8861859012105302, 0.17457781283183896, 0.25755039072276437, -0.07444591576616721, -1.9187712152990415, -0.026513875449216878, 0.06023020994102644, 2.463242112485286, -0.19236096478112252, 0.30154734233361247, -0.03471176970524331, -1.168678037619532, 1.1428228145150205, 0.7519330326867741, 0.7910319470430469, -0.9093874547947389, 1.4027943109360992, -1.4018510627922809, 0.5868570938002703, 2.1904556258099785, -0.9905363251306883, -0.5662977296027719, 0.09965136508764122, -0.5034756541161992, -1.5506634310661327, 0.06856297480602733, -1.0623037137261049, 0.4735924306351816, -0.9194242342338032, 1.5499344050175394, -0.7832532923362371, -0.3220615162056756, 0.8135172173696698, -1.2308643164339552 ]
            |  },
            |  "mapping": {
            |    "x": "x",
            |    "y": "y"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "str",
            |        "column": "x"
            |      },
            |      {
            |        "type": "float",
            |        "column": "y"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "violin",
            |      "mapping": {
            |        "fill": "..quantile.."
            |      },
            |      "data_meta": {},
            |      "quantiles": [
            |        0.02,
            |        0.25,
            |        0.5,
            |        0.75,
            |        0.98
            |      ],
            |      "quantile_lines": true,
            |      "scale": "count"
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("violin_geom_3.png", plotSpec)
    }

    @Test
    fun `#3 example from documentation geom_violin`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "x": [ "a", "a", "a", "b", "b", "b", "c", "c", "c" ],
            |    "y": [ 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0 ],
            |    "vw": [ 0.3745401188473625, 0.9507143064099162, 0.7319939418114051, 0.5986584841970366, 0.15601864044243652, 0.15599452033620265, 0.05808361216819946, 0.8661761457749352, 0.6011150117432088 ]
            |  },
            |  "mapping": {
            |    "x": "x",
            |    "y": "y"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "str",
            |        "column": "x"
            |      },
            |      {
            |        "type": "int",
            |        "column": "y"
            |      },
            |      {
            |        "type": "float",
            |        "column": "vw"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "violin",
            |      "stat": "identity",
            |      "mapping": {
            |        "violinwidth": "vw",
            |        "fill": "x"
            |      },
            |      "data_meta": {}
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("violin_geom_4.png", plotSpec)
    }

    @Test
    fun `#4 example from documentation geom_violin`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "variable": [ "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x1", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x2", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x3", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x4", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5", "x5" ],
            |    "value": [ 0.4967141530112327, -0.13826430117118466, 0.6476885381006925, 1.5230298564080254, -0.23415337472333597, -0.23413695694918055, 1.5792128155073915, 0.7674347291529088, -0.4694743859349521, 0.5425600435859647, -0.46341769281246226, -0.46572975357025687, 0.24196227156603412, -1.913280244657798, -1.7249178325130328, -0.5622875292409727, -1.0128311203344238, 0.3142473325952739, -0.9080240755212109, -1.4123037013352915, 1.465648768921554, -0.22577630048653566, 0.06752820468792384, -1.4247481862134568, -0.5443827245251827, 0.11092258970986608, -1.1509935774223028, 0.37569801834567196, -0.600638689918805, -0.2916937497932768, -0.6017066122293969, 1.8522781845089378, -0.013497224737933921, -1.0577109289559004, 0.822544912103189, -1.2208436499710222, 0.2088635950047554, -1.9596701238797756, -1.3281860488984305, 0.19686123586912352, 0.7384665799954104, 0.1713682811899705, -0.11564828238824053, -0.3011036955892888, -1.4785219903674274, -0.7198442083947086, -0.4606387709597875, 1.0571222262189157, 0.3436182895684614, -1.763040155362734, 0.324083969394795, -0.38508228041631654, -0.6769220003059587, 0.6116762888408679, 1.030999522495951, 0.9312801191161986, -0.8392175232226385, -0.3092123758512146, 0.33126343140356396, 0.9755451271223592, -0.47917423784528995, -0.18565897666381712, -1.1063349740060282, -1.1962066240806708, 0.812525822394198, 1.356240028570823, -0.07201012158033385, 1.0035328978920242, 0.36163602504763415, -0.6451197546051243, 0.36139560550841393, 1.5380365664659692, -0.03582603910995154, 1.5646436558140062, -2.6197451040897444, 0.8219025043752238, 0.08704706823817122, -0.29900735046586746, 0.0917607765355023, -1.9875689146008928, -0.21967188783751193, 0.3571125715117464, 1.477894044741516, -0.5182702182736474, -0.8084936028931876, -0.5017570435845365, 0.9154021177020741, 0.32875110965968446, -0.5297602037670388, 0.5132674331133561, 0.09707754934804039, 0.9686449905328892, -0.7020530938773524, -0.3276621465977682, -0.39210815313215763, -1.4635149481321186, 0.29612027706457605, 0.26105527217988933, 0.00511345664246089, -0.23458713337514692, -1.4153707420504142, -0.42064532276535904, -0.3427145165267695, -0.8022772692216189, -0.16128571166600914, 0.4040508568145384, 1.8861859012105302, 0.17457781283183896, 0.25755039072276437, -0.07444591576616721, -1.9187712152990415, -0.026513875449216878, 0.06023020994102644, 2.463242112485286, -0.19236096478112252, 0.30154734233361247, -0.03471176970524331, -1.168678037619532, 1.1428228145150205, 0.7519330326867741, 0.7910319470430469, -0.9093874547947389, 1.4027943109360992, -1.4018510627922809, 0.5868570938002703, 2.1904556258099785, -0.9905363251306883, -0.5662977296027719, 0.09965136508764122, -0.5034756541161992, -1.5506634310661327, 0.06856297480602733, -1.0623037137261049, 0.4735924306351816, -0.9194242342338032, 1.5499344050175394, -0.7832532923362371, -0.3220615162056756, 0.8135172173696698, -1.2308643164339552, 0.22745993460412942, 1.307142754282428, -1.6074832345612275, 0.1846338585323042, 0.25988279424842353, 0.7818228717773104, -1.236950710878082, -1.3204566130842763, 0.5219415656168976, 0.29698467323318606, 0.25049285034587654, 0.3464482094969757, -0.6800247215784908, 0.23225369716100355, 0.29307247329868125, -0.7143514180263678, 1.8657745111447566, 0.4738329209117875, -1.1913034972026486, 0.6565536086338297, -0.9746816702273214, 0.787084603742452, 1.158595579007404, -0.8206823183517105, 0.9633761292443218, 0.4127809269364983, 0.82206015999449, 1.8967929826539474, -0.2453881160028705, -0.7537361643574896, -0.8895144296255233, -0.8158102849654383, -0.0771017094141042, 0.3411519748166439, 0.27669079933001905, 0.8271832490360238, 0.01300189187790702, 1.4535340771573169, -0.2646568332379561, 2.720169166589619, 0.6256673477650062, -0.8571575564162826, -1.0708924980611123, 0.4824724152431853, -0.2234627853258509, 0.714000494092092, 0.47323762457354485, -0.07282891265687277, -0.846793718068405, -1.5148472246858646, -0.4465149520670211, 0.8563987943234723, 0.21409374413020396, -1.245738778711988, 0.173180925851182, 0.3853173797288368, -0.883857436201133, 0.1537251059455279, 0.058208718445999896, -1.142970297830623, 0.3577873603482833, 0.5607845263682344, 1.083051243175277, 1.053802052034903, -1.377669367957091, -0.9378250399151228, 0.5150352672086598, 0.5137859509122088, 0.5150476863060479, 3.852731490654721, 0.570890510693167, 1.135565640180599, 0.9540017634932023, 0.651391251305798, -0.3152692446403456, 0.7589692204932674, -0.7728252145375718, -0.23681860674000887, -0.48536354782910346, 0.08187413938632256, 2.3146585666735087, -1.867265192591748, 0.6862601903745135, -1.6127158711896517, -0.47193186578943347, 1.088950596967366, 0.06428001909546277, -1.0777447779293061, -0.7153037092599682, 0.6795977489346758, -0.7303666317171367, 0.21645858958197486, 0.045571839903813784, -0.6516003476058171, 2.1439440893253257, 0.6339190223180112, -2.025142586657607, 0.18645431476942764, -0.661786464768388, 0.852433334796224, -0.7925207384327007, -0.11473644146689901, 0.5049872789804571, 0.8657551941701215, -1.2002964070557762, -0.3345012358409484, -0.4749453111609562, -0.6533292325737119, 1.7654542402810969, 0.40498171096095553, -1.2608839543350452, 0.9178619470547761, 2.1221561970126332, 1.0324652605511468, -1.5193699659540134, -0.48423407286625136, 1.2669111491866227, -0.7076694656187807, 0.44381942814622843, 0.7746340534293368, -0.926930471578083, -0.05952535606180008, -3.2412673400690726, -1.0243876413342898, -0.2525681513931603, -1.2477831819648495, 1.6324113039316352, -1.4301413779606327, -0.44004448669698376, 0.13074057728609134, 1.4412732890661155, -1.4358621511794394, 1.1631637521549596, 0.010233061019587049, -0.9815086510479509, 0.46210347426327075, 0.19905969557347003, -0.6002168771587947, 0.06980208499001891, -0.3853135968617602, 0.11351734525124804, 0.6621306745210467, 1.586016816145352, -1.237815498826849, 2.1330333746562666, -1.9520877995225019, -0.15178509503558332, 0.5883172064845765, 0.28099186773503265, -0.6226995198205938, -0.20812225035727522, -0.4930009346588328, -0.5893647569442115, 0.8496020970210246, 0.35701548596504734, -0.6929095952606542, 0.8995998754332507, 0.30729952087660933, 0.8128621188389601, 0.6296288419236122, -0.8289950109220723, -0.5601810401969696, 0.7472936051232618, 0.6103702654334648, -0.020901593964148132, 0.117327383308782, 1.277664895788425, -0.5915713888358299, 0.5470973811700379, -0.20219265243389406, -0.2176812032272203, 1.09877685198719, 0.8254163489880298, 0.8135096360006385, 1.305478807154329, 0.02100384163275905, 0.6819529712949639, -0.31026675659345604, 0.3241663524884421, -0.13014305436768459, 0.09699596499271819, 0.5951570254369136, -0.8182206832334725, 2.0923872756854602, -1.006017381499702, -1.2141886127877322, 1.1581108735000678, 0.7916626939629359, 0.6241198170521551, 0.6283455092642799, -0.012246772846914623, -0.8972543714858315, 0.07580455819372633, -0.6771617115121117, 0.9751197334177512, -0.14705738150213865, -0.8254971967925115, -0.32138584165299344, 0.41293145427562433, -0.5637245528039747, -0.8222203955664315, 0.2436872114919123, 0.24496657110872277, -0.5069431753711298, -0.4710383056183228, 0.2320499373576363, -1.4480843414973241, -1.4074637743765552, -0.718444221252436, -0.21344715171184725, 0.3109075655980046, 1.475356216949552, 0.8576596232020194, -0.1599385299634271, -0.01901620790268883, -1.0025293646378088, -0.01851313599238993, -0.2886586389201383, 0.3227185603380895, -0.827230943552323, 0.5193465142411723, 1.5327389130025777, -0.1087601484568576, 0.40171172209894146, 0.6901439917111125, -0.40122047188583626, 0.22409248181041677, 0.01259240078179486, 0.09767609854883172, -0.7730097838554665, 0.024510174258942714, 0.49799829124544975, 1.4511436077950417, 0.9592708260852069, 2.1531824575115563, -0.7673475628880495, 0.8723206367206782, 0.18334200573835174, 2.1898029332176723, -0.8082982853551515, -0.8397218421807761, -0.5993926454440222, -2.123895724309807, -0.525755021680761, -0.759132661553698, 0.15039378647620763, 0.34175597577715944, 1.8761708392158862, 0.9504238381860503, -0.5769036556624031, -0.898414671348358, 0.4919191715065057, -1.3202332070206422, 1.8314587658543537, 1.179440120721287, -0.4691756521047048, -1.7131345290908775, 1.3538723741654128, -0.11453984525261789, 1.2378163119734618, -1.594427658794367, -0.5993750229537729, 0.005243699718183166, 0.046980593764742055, -0.45006547147924364, 0.6228499323474987, -1.0676204293825944, -0.1423794850212935, 0.12029563171189886, 0.514438834058749, 0.7116148780888898, -1.1246420918378692, -1.5341141707356223, 1.277676821898509, 0.33231401197959165, -0.7484865365565536, 1.551151975522523, 0.11567463429285867, 1.1792971840638264, 0.06751848141010895, 2.060747924881987, 1.7553408424432044, -0.2489641484790735, 0.9715709509543554, 0.6453759495851475, 1.3686315575323487, -0.9649234605801045, 0.6860514599984393, 1.0584244868495878, -1.7587394864231143, -1.183258512665775, -2.0392321777601006, -0.26940683444455776, 0.7175422557959623, 1.502357052096028, 0.07409478041977519, 1.6286155455712918, -1.3801014582148914, -1.7033824393551547, -0.05554769889661878, 0.3840654489393073, -0.03269474809409311, -2.0674421000398766, -0.08912003951278841, -1.3044695005048532, 0.6696725488300385, 0.36659824609684827, -0.9398797863273552, -0.5138669173366935, -1.0592135218889516, -0.06267909727317188, 0.9551423205012383, -0.9857260463355437, 0.5040465155178444, -0.5302576183724408, -0.7928728322623442, -0.10703035995455783, -1.035242322419374, -0.553649305347182, -1.1978778925888485, 1.9647251329163893, 0.03526355197172861, -0.6997255079925856, 0.213979910734222, -0.11232804969082982, -0.22096959953322298, 0.6141667000434252, 0.7575077100473051, -0.5305011476105275, -0.57581824064468, -0.275051697151644, -2.301921164735585, -1.5151910621985523, 1.3668742674445247, 1.6449677135012837, -0.24903603955637832, 0.5765569630557664, 0.3112501545435361, 3.0788808084552377, 1.1195749114345768, -0.12791759148076653, -0.9555404406004258, -1.6064463202575725, 0.2034636358672231, -0.7563507452843033, -1.4222537095976742, -0.6465728842425266, -1.081548003614395, 1.6871416350725648, 0.8816397569494505, -0.007972641316617372, 1.4799441388900259, 0.0773683076476183, -0.8612842013282637, 1.5231240772696573, 0.5389100436846587, -1.0372461543264564, -0.1903386780836082, -0.8756182533847572, -1.382799730964336 ]
            |  },
            |  "mapping": {
            |    "x": "variable",
            |    "y": "value"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "str",
            |        "column": "variable"
            |      },
            |      {
            |        "type": "float",
            |        "column": "value"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "violin",
            |      "mapping": {
            |        "color": "variable",
            |        "fill": "variable"
            |      },
            |      "data_meta": {},
            |      "scale": "width",
            |      "size": 2.0,
            |      "alpha": 0.5
            |    },
            |    {
            |      "geom": "boxplot",
            |      "mapping": {
            |        "fill": "variable"
            |      },
            |      "data_meta": {},
            |      "width": 0.2
            |    },
            |    {
            |      "geom": "point",
            |      "stat": "boxplot_outlier",
            |      "mapping": {
            |        "fill": "variable"
            |      },
            |      "show_legend": false,
            |      "data_meta": {}
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("violin_geom_5.png", plotSpec)
    }

    @Test
    fun `#5 example from documentation geom_violin`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "x": [ "c", "d", "a", "c", "c", "d", "a", "a", "c", "b", "c", "c", "c", "c", "d", "a", "d", "d", "d", "c", "b", "a", "b", "d", "d", "b", "b", "b", "d", "d", "a", "a", "d", "b", "b", "a", "d", "a", "a", "c", "c", "c", "b", "d", "d", "d", "d", "c", "b", "b", "c", "b", "c", "d", "c", "d", "d", "a", "c", "a", "c", "c", "a", "a", "c", "b", "d", "a", "d", "b", "b", "b", "a", "b", "a", "b", "d", "d", "c", "d", "c", "d", "a", "d", "c", "c", "b", "a", "d", "b", "d", "d", "b", "b", "b", "b", "b", "d", "b", "a" ],
            |    "y1": [ 0.7384665799954104, 0.1713682811899705, -0.11564828238824053, -0.3011036955892888, -1.4785219903674274, -0.7198442083947086, -0.4606387709597875, 1.0571222262189157, 0.3436182895684614, -1.763040155362734, 0.324083969394795, -0.38508228041631654, -0.6769220003059587, 0.6116762888408679, 1.030999522495951, 0.9312801191161986, -0.8392175232226385, -0.3092123758512146, 0.33126343140356396, 0.9755451271223592, -0.47917423784528995, -0.18565897666381712, -1.1063349740060282, -1.1962066240806708, 0.812525822394198, 1.356240028570823, -0.07201012158033385, 1.0035328978920242, 0.36163602504763415, -0.6451197546051243, 0.36139560550841393, 1.5380365664659692, -0.03582603910995154, 1.5646436558140062, -2.6197451040897444, 0.8219025043752238, 0.08704706823817122, -0.29900735046586746, 0.0917607765355023, -1.9875689146008928, -0.21967188783751193, 0.3571125715117464, 1.477894044741516, -0.5182702182736474, -0.8084936028931876, -0.5017570435845365, 0.9154021177020741, 0.32875110965968446, -0.5297602037670388, 0.5132674331133561, 0.09707754934804039, 0.9686449905328892, -0.7020530938773524, -0.3276621465977682, -0.39210815313215763, -1.4635149481321186, 0.29612027706457605, 0.26105527217988933, 0.00511345664246089, -0.23458713337514692, -1.4153707420504142, -0.42064532276535904, -0.3427145165267695, -0.8022772692216189, -0.16128571166600914, 0.4040508568145384, 1.8861859012105302, 0.17457781283183896, 0.25755039072276437, -0.07444591576616721, -1.9187712152990415, -0.026513875449216878, 0.06023020994102644, 2.463242112485286, -0.19236096478112252, 0.30154734233361247, -0.03471176970524331, -1.168678037619532, 1.1428228145150205, 0.7519330326867741, 0.7910319470430469, -0.9093874547947389, 1.4027943109360992, -1.4018510627922809, 0.5868570938002703, 2.1904556258099785, -0.9905363251306883, -0.5662977296027719, 0.09965136508764122, -0.5034756541161992, -1.5506634310661327, 0.06856297480602733, -1.0623037137261049, 0.4735924306351816, -0.9194242342338032, 1.5499344050175394, -0.7832532923362371, -0.3220615162056756, 0.8135172173696698, -1.2308643164339552 ],
            |    "y2": [ 0.22745993460412942, 1.307142754282428, -1.6074832345612275, 0.1846338585323042, 0.25988279424842353, 0.7818228717773104, -1.236950710878082, -1.3204566130842763, 0.5219415656168976, 0.29698467323318606, 0.25049285034587654, 0.3464482094969757, -0.6800247215784908, 0.23225369716100355, 0.29307247329868125, -0.7143514180263678, 1.8657745111447566, 0.4738329209117875, -1.1913034972026486, 0.6565536086338297, -0.9746816702273214, 0.787084603742452, 1.158595579007404, -0.8206823183517105, 0.9633761292443218, 0.4127809269364983, 0.82206015999449, 1.8967929826539474, -0.2453881160028705, -0.7537361643574896, -0.8895144296255233, -0.8158102849654383, -0.0771017094141042, 0.3411519748166439, 0.27669079933001905, 0.8271832490360238, 0.01300189187790702, 1.4535340771573169, -0.2646568332379561, 2.720169166589619, 0.6256673477650062, -0.8571575564162826, -1.0708924980611123, 0.4824724152431853, -0.2234627853258509, 0.714000494092092, 0.47323762457354485, -0.07282891265687277, -0.846793718068405, -1.5148472246858646, -0.4465149520670211, 0.8563987943234723, 0.21409374413020396, -1.245738778711988, 0.173180925851182, 0.3853173797288368, -0.883857436201133, 0.1537251059455279, 0.058208718445999896, -1.142970297830623, 0.3577873603482833, 0.5607845263682344, 1.083051243175277, 1.053802052034903, -1.377669367957091, -0.9378250399151228, 0.5150352672086598, 0.5137859509122088, 0.5150476863060479, 3.852731490654721, 0.570890510693167, 1.135565640180599, 0.9540017634932023, 0.651391251305798, -0.3152692446403456, 0.7589692204932674, -0.7728252145375718, -0.23681860674000887, -0.48536354782910346, 0.08187413938632256, 2.3146585666735087, -1.867265192591748, 0.6862601903745135, -1.6127158711896517, -0.47193186578943347, 1.088950596967366, 0.06428001909546277, -1.0777447779293061, -0.7153037092599682, 0.6795977489346758, -0.7303666317171367, 0.21645858958197486, 0.045571839903813784, -0.6516003476058171, 2.1439440893253257, 0.6339190223180112, -2.025142586657607, 0.18645431476942764, -0.661786464768388, 0.852433334796224 ]
            |  },
            |  "mapping": {},
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "str",
            |        "column": "x"
            |      },
            |      {
            |        "type": "float",
            |        "column": "y1"
            |      },
            |      {
            |        "type": "float",
            |        "column": "y2"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "violin",
            |      "mapping": {
            |        "x": "x",
            |        "y": "y1"
            |      },
            |      "data_meta": {},
            |      "show_half": -1.0,
            |      "trim": false,
            |      "fill": "#ffffb2"
            |    },
            |    {
            |      "geom": "violin",
            |      "mapping": {
            |        "x": "x",
            |        "y": "y2"
            |      },
            |      "data_meta": {},
            |      "show_half": 1.0,
            |      "trim": false,
            |      "fill": "#74c476"
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("violin_geom_6.png", plotSpec)
    }

    companion object {
        @JvmStatic
        @BeforeClass
        fun setUp() {
            registerFont("NotoSans-Regular.ttf")
            registerFont("NotoSans-Bold.ttf")
            registerFont("NotoSans-Italic.ttf")
            registerFont("NotoSans-BoldItalic.ttf")
            registerFont("NotoSerif-Regular.ttf")
        }

        private fun registerFont(resourceName: String) {
            val fontStream: InputStream? = PlotImageExportVisualTest::class.java.getClassLoader().getResourceAsStream(resourceName)
            try {
                val customFont = Font.createFont(Font.TRUETYPE_FONT, fontStream)
                val ge = GraphicsEnvironment.getLocalGraphicsEnvironment()
                ge.registerFont(customFont)
            } catch (e: FontFormatException) {
                e.printStackTrace()
            } catch (e: IOException) {
                e.printStackTrace()
            } finally {
                if (fontStream != null) {
                    try {
                        fontStream.close()
                    } catch (e: IOException) {
                        e.printStackTrace()
                    }
                }
            }
        }
    }
}