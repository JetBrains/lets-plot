/*
 * Copyright (c) 2025. JetBrains s.r.o.
 * Use of this source code is governed by the MIT license that can be found in the LICENSE file.
 */

package org.jetbrains.letsPlot.core.plot.export

import demoAndTestShared.AwtBitmapIO
import demoAndTestShared.AwtTestCanvasProvider
import demoAndTestShared.ImageComparer
import demoAndTestShared.parsePlotSpec
import org.jetbrains.letsPlot.commons.geometry.DoubleVector
import org.jetbrains.letsPlot.commons.values.awt.BitmapUtil
import org.jetbrains.letsPlot.core.spec.Option
import org.jetbrains.letsPlot.core.spec.getMap
import org.jetbrains.letsPlot.core.util.PlotExportCommon.SizeUnit
import org.junit.BeforeClass
import java.awt.Font
import java.awt.FontFormatException
import java.awt.GraphicsEnvironment
import java.io.IOException
import java.io.InputStream
import javax.imageio.ImageIO
import kotlin.test.Test

class SmoothGeomTest {

    private fun MutableMap<String, Any>.themeTextNotoSans(): MutableMap<String, Any> {
        val theme = getMap("theme") ?: emptyMap()
        this[Option.Plot.THEME] =  theme + mapOf(
            "text" to mapOf(
                "blank" to false,
                "family" to "Noto Sans"
            ),
            "axis_title_y" to mapOf(
                "blank" to true // hide rotated text - antialiasing may cause image differences
            )
        )
        return this
    }

    private fun createImageComparer(): ImageComparer {
        return ImageComparer(
            canvasProvider = AwtTestCanvasProvider(),
            bitmapIO = AwtBitmapIO,
            expectedDir = System.getProperty("user.dir") + "/src/jvmTest/resources/expected/",
            outDir = System.getProperty("user.dir") + "/build/reports/"
        )
    }

    private val imageComparer by lazy { createImageComparer() }

    private fun assertPlot(
        expectedFileName: String,
        plotSpec: MutableMap<String, Any>,
        width: Number? = null,
        height: Number? = null,
        unit: SizeUnit? = null,
        dpi: Number? = null,
        scale: Number? = null
    ) {
        val plotSize = if (width != null && height != null) DoubleVector(width, height) else null

        val imageData = PlotImageExport.buildImageFromRawSpecs(
            plotSpec = plotSpec,
            format = PlotImageExport.Format.PNG,
            scalingFactor = scale ?: 1.0,
            targetDPI = dpi,
            plotSize = plotSize,
            unit = unit
        )
        val image = ImageIO.read(imageData.bytes.inputStream())
        val bitmap = BitmapUtil.fromBufferedImage(image)


        imageComparer.assertBitmapEquals(expectedFileName, bitmap)
    }

    @Test
    fun `example from #143 Broken colors with scale_color_discrete and groups`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "displ": [ 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 3.1, 2.8, 3.1, 4.2, 5.3, 5.3, 5.3, 5.7, 6.0, 5.7, 5.7, 6.2, 6.2, 7.0, 5.3, 5.3, 5.7, 6.5, 2.4, 2.4, 3.1, 3.5, 3.6, 2.4, 3.0, 3.3, 3.3, 3.3, 3.3, 3.3, 3.8, 3.8, 3.8, 4.0, 3.7, 3.7, 3.9, 3.9, 4.7, 4.7, 4.7, 5.2, 5.2, 3.9, 4.7, 4.7, 4.7, 5.2, 5.7, 5.9, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 5.2, 5.2, 5.7, 5.9, 4.6, 5.4, 5.4, 4.0, 4.0, 4.0, 4.0, 4.6, 5.0, 4.2, 4.2, 4.6, 4.6, 4.6, 5.4, 5.4, 3.8, 3.8, 4.0, 4.0, 4.6, 4.6, 4.6, 4.6, 5.4, 1.6, 1.6, 1.6, 1.6, 1.6, 1.8, 1.8, 1.8, 2.0, 2.4, 2.4, 2.4, 2.4, 2.5, 2.5, 3.3, 2.0, 2.0, 2.0, 2.0, 2.7, 2.7, 2.7, 3.0, 3.7, 4.0, 4.7, 4.7, 4.7, 5.7, 6.1, 4.0, 4.2, 4.4, 4.6, 5.4, 5.4, 5.4, 4.0, 4.0, 4.6, 5.0, 2.4, 2.4, 2.5, 2.5, 3.5, 3.5, 3.0, 3.0, 3.5, 3.3, 3.3, 4.0, 5.6, 3.1, 3.8, 3.8, 3.8, 5.3, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.2, 2.2, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.7, 2.7, 3.4, 3.4, 4.0, 4.7, 2.2, 2.2, 2.4, 2.4, 3.0, 3.0, 3.5, 2.2, 2.2, 2.4, 2.4, 3.0, 3.0, 3.3, 1.8, 1.8, 1.8, 1.8, 1.8, 4.7, 5.7, 2.7, 2.7, 2.7, 3.4, 3.4, 4.0, 4.0, 2.0, 2.0, 2.0, 2.0, 2.8, 1.9, 2.0, 2.0, 2.0, 2.0, 2.5, 2.5, 2.8, 2.8, 1.9, 1.9, 2.0, 2.0, 2.5, 2.5, 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.6 ],
            |    "hwy": [ 29.0, 29.0, 31.0, 30.0, 26.0, 26.0, 27.0, 26.0, 25.0, 28.0, 27.0, 25.0, 25.0, 25.0, 25.0, 24.0, 25.0, 23.0, 20.0, 15.0, 20.0, 17.0, 17.0, 26.0, 23.0, 26.0, 25.0, 24.0, 19.0, 14.0, 15.0, 17.0, 27.0, 30.0, 26.0, 29.0, 26.0, 24.0, 24.0, 22.0, 22.0, 24.0, 24.0, 17.0, 22.0, 21.0, 23.0, 23.0, 19.0, 18.0, 17.0, 17.0, 19.0, 19.0, 12.0, 17.0, 15.0, 17.0, 17.0, 12.0, 17.0, 16.0, 18.0, 15.0, 16.0, 12.0, 17.0, 17.0, 16.0, 12.0, 15.0, 16.0, 17.0, 15.0, 17.0, 17.0, 18.0, 17.0, 19.0, 17.0, 19.0, 19.0, 17.0, 17.0, 17.0, 16.0, 16.0, 17.0, 15.0, 17.0, 26.0, 25.0, 26.0, 24.0, 21.0, 22.0, 23.0, 22.0, 20.0, 33.0, 32.0, 32.0, 29.0, 32.0, 34.0, 36.0, 36.0, 29.0, 26.0, 27.0, 30.0, 31.0, 26.0, 26.0, 28.0, 26.0, 29.0, 28.0, 27.0, 24.0, 24.0, 24.0, 22.0, 19.0, 20.0, 17.0, 12.0, 19.0, 18.0, 14.0, 15.0, 18.0, 18.0, 15.0, 17.0, 16.0, 18.0, 17.0, 19.0, 19.0, 17.0, 29.0, 27.0, 31.0, 32.0, 27.0, 26.0, 26.0, 25.0, 25.0, 17.0, 17.0, 20.0, 18.0, 26.0, 26.0, 27.0, 28.0, 25.0, 25.0, 24.0, 27.0, 25.0, 26.0, 23.0, 26.0, 26.0, 26.0, 26.0, 25.0, 27.0, 25.0, 27.0, 20.0, 20.0, 19.0, 17.0, 20.0, 17.0, 29.0, 27.0, 31.0, 31.0, 26.0, 26.0, 28.0, 27.0, 29.0, 31.0, 31.0, 26.0, 26.0, 27.0, 30.0, 33.0, 35.0, 37.0, 35.0, 15.0, 18.0, 20.0, 20.0, 22.0, 17.0, 19.0, 18.0, 20.0, 29.0, 26.0, 29.0, 29.0, 24.0, 44.0, 29.0, 26.0, 29.0, 29.0, 29.0, 29.0, 23.0, 24.0, 44.0, 41.0, 29.0, 26.0, 28.0, 29.0, 29.0, 29.0, 28.0, 29.0, 26.0, 26.0, 26.0 ],
            |    "cyl": [ 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 4.0, 4.0, 6.0, 6.0, 6.0, 4.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 8.0, 6.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 6.0, 6.0, 6.0, 6.0, 8.0, 8.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 8.0, 6.0, 6.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 8.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 6.0, 6.0, 8.0, 8.0, 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 6.0, 6.0, 6.0, 6.0, 8.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 8.0, 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 4.0, 4.0, 4.0, 4.0, 4.0, 8.0, 8.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 6.0, 4.0, 4.0, 4.0, 4.0, 6.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 6.0, 6.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0 ]
            |  },
            |  "mapping": {
            |    "x": "displ",
            |    "y": "hwy"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "float",
            |        "column": "displ"
            |      },
            |      {
            |        "type": "int",
            |        "column": "hwy"
            |      },
            |      {
            |        "type": "int",
            |        "column": "cyl"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [
            |    {
            |      "aesthetic": "color",
            |      "discrete": true
            |    }
            |  ],
            |  "layers": [
            |    {
            |      "geom": "point",
            |      "mapping": {
            |        "color": "cyl"
            |      },
            |      "data_meta": {}
            |    },
            |    {
            |      "geom": "smooth",
            |      "mapping": {
            |        "color": "cyl",
            |        "group": "cyl"
            |      },
            |      "data_meta": {},
            |      "method": "lm",
            |      "deg": 2.0,
            |      "size": 1.0
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("smooth_geom_1.png", plotSpec)
    }

    @Test
    fun `example from #82 geom_smooth with LOESS the shown confidence interval is random`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "displ": [ 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 3.1, 2.8, 3.1, 4.2, 5.3, 5.3, 5.3, 5.7, 6.0, 5.7, 5.7, 6.2, 6.2, 7.0, 5.3, 5.3, 5.7, 6.5, 2.4, 2.4, 3.1, 3.5, 3.6, 2.4, 3.0, 3.3, 3.3, 3.3, 3.3, 3.3, 3.8, 3.8, 3.8, 4.0, 3.7, 3.7, 3.9, 3.9, 4.7, 4.7, 4.7, 5.2, 5.2, 3.9, 4.7, 4.7, 4.7, 5.2, 5.7, 5.9, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 5.2, 5.2, 5.7, 5.9, 4.6, 5.4, 5.4, 4.0, 4.0, 4.0, 4.0, 4.6, 5.0, 4.2, 4.2, 4.6, 4.6, 4.6, 5.4, 5.4, 3.8, 3.8, 4.0, 4.0, 4.6, 4.6, 4.6, 4.6, 5.4, 1.6, 1.6, 1.6, 1.6, 1.6, 1.8, 1.8, 1.8, 2.0, 2.4, 2.4, 2.4, 2.4, 2.5, 2.5, 3.3, 2.0, 2.0, 2.0, 2.0, 2.7, 2.7, 2.7, 3.0, 3.7, 4.0, 4.7, 4.7, 4.7, 5.7, 6.1, 4.0, 4.2, 4.4, 4.6, 5.4, 5.4, 5.4, 4.0, 4.0, 4.6, 5.0, 2.4, 2.4, 2.5, 2.5, 3.5, 3.5, 3.0, 3.0, 3.5, 3.3, 3.3, 4.0, 5.6, 3.1, 3.8, 3.8, 3.8, 5.3, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.2, 2.2, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.7, 2.7, 3.4, 3.4, 4.0, 4.7, 2.2, 2.2, 2.4, 2.4, 3.0, 3.0, 3.5, 2.2, 2.2, 2.4, 2.4, 3.0, 3.0, 3.3, 1.8, 1.8, 1.8, 1.8, 1.8, 4.7, 5.7, 2.7, 2.7, 2.7, 3.4, 3.4, 4.0, 4.0, 2.0, 2.0, 2.0, 2.0, 2.8, 1.9, 2.0, 2.0, 2.0, 2.0, 2.5, 2.5, 2.8, 2.8, 1.9, 1.9, 2.0, 2.0, 2.5, 2.5, 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.6 ],
            |    "hwy": [ 29.0, 29.0, 31.0, 30.0, 26.0, 26.0, 27.0, 26.0, 25.0, 28.0, 27.0, 25.0, 25.0, 25.0, 25.0, 24.0, 25.0, 23.0, 20.0, 15.0, 20.0, 17.0, 17.0, 26.0, 23.0, 26.0, 25.0, 24.0, 19.0, 14.0, 15.0, 17.0, 27.0, 30.0, 26.0, 29.0, 26.0, 24.0, 24.0, 22.0, 22.0, 24.0, 24.0, 17.0, 22.0, 21.0, 23.0, 23.0, 19.0, 18.0, 17.0, 17.0, 19.0, 19.0, 12.0, 17.0, 15.0, 17.0, 17.0, 12.0, 17.0, 16.0, 18.0, 15.0, 16.0, 12.0, 17.0, 17.0, 16.0, 12.0, 15.0, 16.0, 17.0, 15.0, 17.0, 17.0, 18.0, 17.0, 19.0, 17.0, 19.0, 19.0, 17.0, 17.0, 17.0, 16.0, 16.0, 17.0, 15.0, 17.0, 26.0, 25.0, 26.0, 24.0, 21.0, 22.0, 23.0, 22.0, 20.0, 33.0, 32.0, 32.0, 29.0, 32.0, 34.0, 36.0, 36.0, 29.0, 26.0, 27.0, 30.0, 31.0, 26.0, 26.0, 28.0, 26.0, 29.0, 28.0, 27.0, 24.0, 24.0, 24.0, 22.0, 19.0, 20.0, 17.0, 12.0, 19.0, 18.0, 14.0, 15.0, 18.0, 18.0, 15.0, 17.0, 16.0, 18.0, 17.0, 19.0, 19.0, 17.0, 29.0, 27.0, 31.0, 32.0, 27.0, 26.0, 26.0, 25.0, 25.0, 17.0, 17.0, 20.0, 18.0, 26.0, 26.0, 27.0, 28.0, 25.0, 25.0, 24.0, 27.0, 25.0, 26.0, 23.0, 26.0, 26.0, 26.0, 26.0, 25.0, 27.0, 25.0, 27.0, 20.0, 20.0, 19.0, 17.0, 20.0, 17.0, 29.0, 27.0, 31.0, 31.0, 26.0, 26.0, 28.0, 27.0, 29.0, 31.0, 31.0, 26.0, 26.0, 27.0, 30.0, 33.0, 35.0, 37.0, 35.0, 15.0, 18.0, 20.0, 20.0, 22.0, 17.0, 19.0, 18.0, 20.0, 29.0, 26.0, 29.0, 29.0, 24.0, 44.0, 29.0, 26.0, 29.0, 29.0, 29.0, 29.0, 23.0, 24.0, 44.0, 41.0, 29.0, 26.0, 28.0, 29.0, 29.0, 29.0, 28.0, 29.0, 26.0, 26.0, 26.0 ]
            |  },
            |  "mapping": {
            |    "x": "displ",
            |    "y": "hwy"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "float",
            |        "column": "displ"
            |      },
            |      {
            |        "type": "int",
            |        "column": "hwy"
            |      },
            |      {
            |        "type": "int",
            |        "column": "cyl"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "point",
            |      "mapping": {},
            |      "data_meta": {}
            |    },
            |    {
            |      "geom": "smooth",
            |      "mapping": {},
            |      "data_meta": {},
            |      "method": "loess",
            |      "size": 1.0
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("smooth_geom_2.png", plotSpec)
    }

    @Test
    fun `#1 example from documentation geom_smooth`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "x": [ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0 ],
            |    "y": [ 4.967141530112327, -0.38264301171184645, 8.476885381006925, 18.230298564080254, 1.6584662527666403, 2.6586304305081945, 21.792128155073915, 14.674347291529088, 3.305256140650479, 14.425600435859646, 5.365823071875377, 6.342702464297432, 14.419622715660342, -6.13280244657798, -3.249178325130327, 9.377124707590273, 5.8716887966557625, 20.14247332595274, 8.91975924478789, 4.876962986647085, 34.65648768921554, 18.742236995134643, 22.67528204687924, 8.752518137865433, 18.556172754748175, 26.10922589709866, 14.490064225776973, 30.75698018345672, 21.99361310081195, 26.083062502067232, 23.98293387770603, 49.522781845089376, 31.865027752620662, 22.422890710440996, 42.225449121031886, 22.791563500289776, 38.08863595004755, 17.403298761202244, 24.718139511015693, 40.96861235869123, 47.38466579995411, 42.7136828118997, 40.843517176117594, 39.98896304410711, 29.214780096325725, 37.801557916052914, 41.393612290402125, 57.57122226218915, 51.43618289568462, 31.36959844637266 ]
            |  },
            |  "mapping": {
            |    "x": "x",
            |    "y": "y"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "int",
            |        "column": "x"
            |      },
            |      {
            |        "type": "float",
            |        "column": "y"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "point",
            |      "mapping": {},
            |      "data_meta": {}
            |    },
            |    {
            |      "geom": "smooth",
            |      "mapping": {},
            |      "data_meta": {}
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("smooth_geom_3.png", plotSpec)
    }

    @Test
    fun `#2 example from documentation geom_smooth`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "x": [ -2.0, -1.9595959595959596, -1.9191919191919191, -1.878787878787879, -1.8383838383838385, -1.797979797979798, -1.7575757575757576, -1.7171717171717171, -1.6767676767676767, -1.6363636363636362, -1.595959595959596, -1.5555555555555556, -1.5151515151515151, -1.4747474747474747, -1.4343434343434343, -1.393939393939394, -1.3535353535353534, -1.3131313131313131, -1.2727272727272727, -1.2323232323232323, -1.1919191919191918, -1.1515151515151514, -1.1111111111111112, -1.0707070707070705, -1.0303030303030303, -0.9898989898989898, -0.9494949494949494, -0.909090909090909, -0.8686868686868685, -0.8282828282828283, -0.7878787878787878, -0.7474747474747474, -0.707070707070707, -0.6666666666666665, -0.6262626262626261, -0.5858585858585856, -0.5454545454545454, -0.505050505050505, -0.46464646464646453, -0.4242424242424241, -0.38383838383838365, -0.3434343434343432, -0.303030303030303, -0.26262626262626254, -0.2222222222222221, -0.18181818181818166, -0.14141414141414121, -0.10101010101010077, -0.06060606060606055, -0.02020202020202011, 0.020202020202020332, 0.060606060606060996, 0.10101010101010122, 0.14141414141414144, 0.1818181818181821, 0.22222222222222232, 0.262626262626263, 0.3030303030303032, 0.3434343434343434, 0.3838383838383841, 0.4242424242424243, 0.464646464646465, 0.5050505050505052, 0.5454545454545459, 0.5858585858585861, 0.6262626262626263, 0.666666666666667, 0.7070707070707072, 0.7474747474747478, 0.7878787878787881, 0.8282828282828287, 0.868686868686869, 0.9090909090909092, 0.9494949494949498, 0.9898989898989901, 1.0303030303030307, 1.070707070707071, 1.1111111111111112, 1.1515151515151518, 1.191919191919192, 1.2323232323232327, 1.272727272727273, 1.3131313131313136, 1.3535353535353538, 1.393939393939394, 1.4343434343434347, 1.474747474747475, 1.5151515151515156, 1.5555555555555558, 1.5959595959595965, 1.6363636363636367, 1.676767676767677, 1.7171717171717176, 1.7575757575757578, 1.7979797979797985, 1.8383838383838387, 1.878787878787879, 1.9191919191919196, 1.9595959595959598, 2.0 ],
            |    "y": [ 4.3240839693947954, 3.454934044448493, 3.0063756223856033, 4.141520182321125, 4.410654659726847, 4.164011473059674, 2.2498550203953593, 2.639466330403249, 3.1428132732564356, 3.653231077535582, 2.0679127940902267, 2.234094109755936, 1.1893491398599036, 0.9786734901933829, 2.869866910038316, 3.299307062546948, 1.76004783168974, 2.7278467434179907, 1.9814707357914356, 0.8735007943184548, 1.7820669655737131, 2.8640237106349313, 1.1987418621246164, 2.711057287076122, -1.5582207698381374, 1.8018025145782643, 0.9885877273545877, 0.5274389305258678, 0.846377652364499, -1.3015164709726916, 0.4010810965518361, 0.9158310696241838, 1.9778430295389855, -0.07382577382920313, -0.41628872583982596, -0.15852676096031476, 1.2129227788590988, 0.5838271223114546, -0.31386386665858057, 0.693249067640445, 0.24440945425570273, 1.0865921387830677, -0.6102257293227151, -0.2586895927767296, -0.342725437082775, -1.4304570968924493, 0.3161182364564748, 0.27125831268596007, 0.008786551224646375, -0.23417901175490408, -1.4149626204301715, -0.4169722281831735, -0.33251147602069864, -0.7822793098297202, -0.1282278604263396, 0.45343357286392116, 1.955158455031569, 0.26640517738647634, 0.3754975389729429, 0.07288598914149547, -1.7387895807719524, 0.18938246165924175, 0.31530622259279684, 2.7607627736423113, 0.15086931784309976, 0.6937522193869744, 0.40973267473920155, -0.6687290528220622, 1.7015413126274586, 1.3726860170761226, 1.4770843906712487, -0.15477057896574142, 2.2292405919278346, -0.5003104036758635, 1.5667571040033113, 3.251979960061586, 0.15587730613142836, 0.6682701716317961, 1.4256385092566042, 0.9171957059491006, -0.032042882142552465, 1.6883976855498295, 0.662010131799863, 2.305650383905257, 1.0236427997423219, 3.6072754926616586, 1.391626821937817, 1.9736225976602575, 3.233270303789424, 1.3162227155015633, 2.9051458850173533, 4.1186925961353005, 1.3411954716932377, 3.273706402150303, 3.4926141481919006, 4.161478009008206, 2.2928931826021755, 2.3628410096072874, 4.361957890481708, 4.296984673233186 ]
            |  },
            |  "mapping": {
            |    "x": "x",
            |    "y": "y"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "float",
            |        "column": "x"
            |      },
            |      {
            |        "type": "float",
            |        "column": "y"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "point",
            |      "mapping": {},
            |      "data_meta": {}
            |    },
            |    {
            |      "geom": "smooth",
            |      "mapping": {},
            |      "data_meta": {},
            |      "se": false,
            |      "deg": 2.0,
            |      "color": "red"
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("smooth_geom_4.png", plotSpec)
    }

    @Test
    fun `#3 example from documentation geom_smooth`() {
        val spec = parsePlotSpec("""
            |{
            |  "data": {
            |    "t": [ 0.0, 0.010101010101010102, 0.020202020202020204, 0.030303030303030304, 0.04040404040404041, 0.05050505050505051, 0.06060606060606061, 0.07070707070707072, 0.08080808080808081, 0.09090909090909091, 0.10101010101010102, 0.11111111111111112, 0.12121212121212122, 0.13131313131313133, 0.14141414141414144, 0.15151515151515152, 0.16161616161616163, 0.17171717171717174, 0.18181818181818182, 0.19191919191919193, 0.20202020202020204, 0.21212121212121213, 0.22222222222222224, 0.23232323232323235, 0.24242424242424243, 0.25252525252525254, 0.26262626262626265, 0.27272727272727276, 0.2828282828282829, 0.29292929292929293, 0.30303030303030304, 0.31313131313131315, 0.32323232323232326, 0.33333333333333337, 0.3434343434343435, 0.3535353535353536, 0.36363636363636365, 0.37373737373737376, 0.38383838383838387, 0.393939393939394, 0.4040404040404041, 0.4141414141414142, 0.42424242424242425, 0.43434343434343436, 0.4444444444444445, 0.4545454545454546, 0.4646464646464647, 0.4747474747474748, 0.48484848484848486, 0.494949494949495, 0.5050505050505051, 0.5151515151515152, 0.5252525252525253, 0.5353535353535354, 0.5454545454545455, 0.5555555555555556, 0.5656565656565657, 0.5757575757575758, 0.5858585858585859, 0.595959595959596, 0.6060606060606061, 0.6161616161616162, 0.6262626262626263, 0.6363636363636365, 0.6464646464646465, 0.6565656565656566, 0.6666666666666667, 0.6767676767676768, 0.686868686868687, 0.696969696969697, 0.7070707070707072, 0.7171717171717172, 0.7272727272727273, 0.7373737373737375, 0.7474747474747475, 0.7575757575757577, 0.7676767676767677, 0.7777777777777778, 0.787878787878788, 0.797979797979798, 0.8080808080808082, 0.8181818181818182, 0.8282828282828284, 0.8383838383838385, 0.8484848484848485, 0.8585858585858587, 0.8686868686868687, 0.8787878787878789, 0.888888888888889, 0.8989898989898991, 0.9090909090909092, 0.9191919191919192, 0.9292929292929294, 0.9393939393939394, 0.9494949494949496, 0.9595959595959597, 0.9696969696969697, 0.9797979797979799, 0.98989898989899, 1.0, 0.0, 0.010101010101010102, 0.020202020202020204, 0.030303030303030304, 0.04040404040404041, 0.05050505050505051, 0.06060606060606061, 0.07070707070707072, 0.08080808080808081, 0.09090909090909091, 0.10101010101010102, 0.11111111111111112, 0.12121212121212122, 0.13131313131313133, 0.14141414141414144, 0.15151515151515152, 0.16161616161616163, 0.17171717171717174, 0.18181818181818182, 0.19191919191919193, 0.20202020202020204, 0.21212121212121213, 0.22222222222222224, 0.23232323232323235, 0.24242424242424243, 0.25252525252525254, 0.26262626262626265, 0.27272727272727276, 0.2828282828282829, 0.29292929292929293, 0.30303030303030304, 0.31313131313131315, 0.32323232323232326, 0.33333333333333337, 0.3434343434343435, 0.3535353535353536, 0.36363636363636365, 0.37373737373737376, 0.38383838383838387, 0.393939393939394, 0.4040404040404041, 0.4141414141414142, 0.42424242424242425, 0.43434343434343436, 0.4444444444444445, 0.4545454545454546, 0.4646464646464647, 0.4747474747474748, 0.48484848484848486, 0.494949494949495, 0.5050505050505051, 0.5151515151515152, 0.5252525252525253, 0.5353535353535354, 0.5454545454545455, 0.5555555555555556, 0.5656565656565657, 0.5757575757575758, 0.5858585858585859, 0.595959595959596, 0.6060606060606061, 0.6161616161616162, 0.6262626262626263, 0.6363636363636365, 0.6464646464646465, 0.6565656565656566, 0.6666666666666667, 0.6767676767676768, 0.686868686868687, 0.696969696969697, 0.7070707070707072, 0.7171717171717172, 0.7272727272727273, 0.7373737373737375, 0.7474747474747475, 0.7575757575757577, 0.7676767676767677, 0.7777777777777778, 0.787878787878788, 0.797979797979798, 0.8080808080808082, 0.8181818181818182, 0.8282828282828284, 0.8383838383838385, 0.8484848484848485, 0.8585858585858587, 0.8686868686868687, 0.8787878787878789, 0.888888888888889, 0.8989898989898991, 0.9090909090909092, 0.9191919191919192, 0.9292929292929294, 0.9393939393939394, 0.9494949494949496, 0.9595959595959597, 0.9696969696969697, 0.9797979797979799, 0.98989898989899, 1.0 ],
            |    "variable": [ "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y", "y" ],
            |    "value": [ 1.2504928503458765, 0.3199752784215092, 1.2930724732986811, 2.865774511144757, -0.1913034972026486, 0.02531832977267856, 2.158595579007404, 1.9633761292443217, 1.8220601599944901, 0.7546118839971295, 0.1104855703744767, 0.9228982905858958, 1.276690799330019, 1.0130018918779071, 0.7353431667620439, 1.625667347765006, -0.07089249806111231, 0.7765372146741492, 1.4732376245735448, 0.15320628193159502, 0.5534850479329789, 1.214093744130204, 1.173180925851182, 0.116142563798867, 1.0582087184459998, 1.3577873603482833, 2.083051243175277, -0.37766936795709105, 1.5150352672086598, 1.515047686306048, 1.570890510693167, 1.9540017634932023, 0.6847307553596544, 0.2271747854624282, 0.5146364521708966, 3.3146585666735087, 1.6862601903745134, 0.5280681342105665, 1.0642800190954627, 0.2846962907400318, 0.26963336828286333, 1.0455718399038139, 3.1439440893253257, -1.0251425866576072, 0.338213535231612, 0.20747926156729934, 1.5049872789804573, -0.20029640705577623, 0.5250546888390438, 2.765454240281097, -0.2608839543350452, 3.1221561970126332, -0.5193699659540134, 2.2669111491866225, 1.4438194281462284, 0.07306952842191705, -2.2412673400690726, 0.7474318486068396, 2.6324113039316352, 0.5599555133030163, 2.4412732890661157, 2.1631637521549596, 0.01849134895204907, 1.19905969557347, 1.069802084990019, 1.1135173452512481, 2.586016816145352, 3.1330333746562666, 0.8482149049644166, 1.2809918677350327, 0.7918777496427247, 0.41063524305578847, 1.3570154859650474, 1.8995998754332506, 1.81286211883896, 0.17100498907792772, 1.7472936051232617, 0.9790984060358519, 2.277664895788425, 1.547097381170038, 0.7823187967727797, 1.8254163489880297, 2.305478807154329, 1.681952971294964, 1.3241663524884422, 1.0969959649927181, 0.18177931676652748, -0.00601738149970199, 2.1581108735000676, 1.6241198170521551, 0.9877532271530853, 1.0758045581937263, 1.9751197334177513, 0.17450280320748845, 1.4129314542756244, 0.17777960443356855, 1.2449665711087228, 0.5289616943816773, -0.4480843414973241, 0.281555778747564, 1.3464482094969756, 1.2322536971610036, 0.2856485819736322, 1.4738329209117875, 1.6565536086338297, 1.7870846037424521, 0.17931768164828954, 1.4127809269364984, 2.896792982653947, 0.24626383564251042, 0.18418971503456172, 1.3411519748166438, 1.8271832490360238, 2.453534077157317, 3.720169166589619, 0.14284244358371745, 1.4824724152431852, 1.714000494092092, 0.9271710873431273, -0.5148472246858646, 1.8563987943234723, -0.24573877871198802, 1.3853173797288367, 1.153725105945528, -0.1429702978306231, 1.5607845263682343, 2.0538020520349027, 0.06217496008487722, 1.513785950912209, 4.852731490654721, 2.135565640180599, 1.651391251305798, 1.7589692204932674, 0.7631813932599911, 1.0818741393863225, -0.8672651925917481, -0.6127158711896517, 2.088950596967366, -0.07774477792930612, 1.6795977489346758, 1.2164585895819748, 0.3483996523941829, 1.6339190223180111, 1.1864543147694278, 1.852433334796224, 0.885263558533101, 1.8657551941701214, 0.6654987641590516, 0.3466707674262881, 1.4049817109609555, 1.9178619470547762, 2.032465260551147, 0.5157659271337487, 0.29233053438121925, 1.7746340534293368, 0.9404746439381999, -0.024387641334289833, -0.2477831819648495, -0.4301413779606327, 1.1307405772860912, -0.4358621511794394, 1.010233061019587, 1.4621034742632708, 0.3997831228412053, 0.6146864031382397, 1.6621306745210467, -0.23781549882684905, -0.9520877995225019, 1.5883172064845765, 0.3773004801794062, 0.5069990653411671, 1.8496020970210245, 0.3070904047393458, 1.3072995208766094, 1.6296288419236122, 0.43981895980303043, 1.6103702654334648, 1.117327383308782, 0.40842861116417006, 0.7978073475661059, 2.09877685198719, 1.8135096360006386, 1.0210038416327591, 0.689733243406544, 0.8698569456323154, 1.5951570254369136, 3.0923872756854602, -0.21418861278773216, 1.7916626939629359, 1.62834550926428, 0.10274562851416846, 0.3228382884878883, 0.8529426184978613, 0.6786141583470066, 0.4362754471960253, 1.2436872114919124, 0.49305682462887024, 1.2320499373576363, -0.40746377437655523, 0.7865528482881528 ]
            |  },
            |  "mapping": {
            |    "x": "t",
            |    "y": "value",
            |    "group": "variable"
            |  },
            |  "data_meta": {
            |    "series_annotations": [
            |      {
            |        "type": "float",
            |        "column": "t"
            |      },
            |      {
            |        "type": "str",
            |        "column": "variable"
            |      },
            |      {
            |        "type": "float",
            |        "column": "value"
            |      }
            |    ]
            |  },
            |  "kind": "plot",
            |  "scales": [],
            |  "layers": [
            |    {
            |      "geom": "point",
            |      "mapping": {
            |        "color": "variable"
            |      },
            |      "data_meta": {},
            |      "size": 3.0,
            |      "alpha": 0.5
            |    },
            |    {
            |      "geom": "smooth",
            |      "mapping": {
            |        "color": "variable"
            |      },
            |      "data_meta": {},
            |      "method": "loess",
            |      "level": 0.7,
            |      "span": 0.3,
            |      "seed": 42.0,
            |      "size": 1.0
            |    }
            |  ],
            |  "metainfo_list": []
            |}
        """.trimMargin())

        val plotSpec = spec.themeTextNotoSans()

        assertPlot("smooth_geom_5.png", plotSpec)
    }

    companion object {
        @JvmStatic
        @BeforeClass
        fun setUp() {
            registerFont("NotoSans-Regular.ttf")
            registerFont("NotoSans-Bold.ttf")
            registerFont("NotoSans-Italic.ttf")
            registerFont("NotoSans-BoldItalic.ttf")
            registerFont("NotoSerif-Regular.ttf")
        }

        private fun registerFont(resourceName: String) {
            val fontStream: InputStream? = PlotImageExportVisualTest::class.java.getClassLoader().getResourceAsStream(resourceName)
            try {
                val customFont = Font.createFont(Font.TRUETYPE_FONT, fontStream)
                val ge = GraphicsEnvironment.getLocalGraphicsEnvironment()
                ge.registerFont(customFont)
            } catch (e: FontFormatException) {
                e.printStackTrace()
            } catch (e: IOException) {
                e.printStackTrace()
            } finally {
                if (fontStream != null) {
                    try {
                        fontStream.close()
                    } catch (e: IOException) {
                        e.printStackTrace()
                    }
                }
            }
        }
    }
}