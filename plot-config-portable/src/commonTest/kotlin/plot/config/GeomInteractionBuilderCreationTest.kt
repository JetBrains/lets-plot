/*
 * Copyright (c) 2020. JetBrains s.r.o.
 * Use of this source code is governed by the MIT license that can be found in the LICENSE file.
 */

package plot.config

// TODO: don't test private functions
/*
class GeomInteractionBuilderCreationTest {

    private val data = mapOf(
        Aes.X.name to listOf(1.0),
        Aes.Y.name to listOf(1.0)
    )

    @Test
    fun checkAesListsForTooltipTest() {
        val mappedData = data + mapOf(
            Aes.COLOR.name to listOf('a')
        )
        val plotOpts = mutableMapOf(
            MAPPING to mappedData,
            LAYERS to listOf(
                mapOf(
                    GEOM to Option.GeomName.HISTOGRAM
                )
            )
        )
        val layerConfig = createLayerConfig(plotOpts)

        val builder = GeomInteractionUtil.configGeomTargets(
            layerConfig,
            false,
            false,
            DefaultTheme()
        )

        val expectedAxisList = listOf(Aes.X)
        val expectedAesListCount = (layerConfig.geomProto.renders() - expectedAxisList).size

        assertAesListCount(expectedAxisList.size, builder.axisAesListForTooltip)
        assertAesListCount(expectedAesListCount, builder.aesListForTooltip)
    }

    @Test
    fun shouldNotDuplicateVarToAxisAndGenericTooltip() {
        val mappedData = mapOf(
            Aes.X.name to listOf(4.0),
            Aes.FILL.name to Aes.X.name
        )

        val plotOpts = mutableMapOf(
            MAPPING to mappedData,
            LAYERS to listOf(
                mapOf(
                    GEOM to Option.GeomName.HISTOGRAM
                )
            )
        )
        val layerConfig = createLayerConfig(plotOpts)

        val builder = GeomInteractionUtil.createGeomInteractionBuilder(
            layerConfig,
            emptyList(),
            false
        )

        assertFalse { builder.aesListForTooltip.contains(Aes.FILL) }

        val expectedAxisList = listOf(Aes.X)
        // without duplicated Aes.FILL:
        val expectedAesListCount = (layerConfig.geomProto.renders() - expectedAxisList).size - 1

        assertAesListCount(expectedAxisList.size, builder.axisAesListForTooltip)
        assertAesListCount(expectedAesListCount, builder.aesListForTooltip)
    }

    @Test
    fun shouldSkipAutoGeneratedMappings() {

        val GEOMETRIES = listOf(
            "{\"type\": \"Point\", \"coordinates\":[-10, -20]}",
            "{\"type\": \"Point\", \"coordinates\":[-30, -40]}",
            "{\"type\": \"Point\", \"coordinates\":[-50, -60]}"
        )
        val geomData = mapOf(
            "name" to listOf("a", "b", "c"),
            "value" to listOf("1", "2", "3"),
            "coord" to GEOMETRIES
        )
        val GEO_DATA_FRAME_META = mapOf(
            GeoDataFrame.GDF to mapOf(
                GeoDataFrame.GEOMETRY to "coord"
            )
        )
        val plotOpts = mutableMapOf(
            KIND to PLOT,
            LAYERS to listOf(
                mutableMapOf(
                    GEOM to POINT,
                    DATA to geomData,
                    DATA_META to GEO_DATA_FRAME_META,
                    MAPPING to mapOf(Aes.FILL.name to "name")
                )
            )
        )


        val opts = PlotConfigServerSide.processTransform(plotOpts)
        val layerConfig = PlotConfigClientSide.create(opts).layerConfigs.first()

        val pointX = layerConfig.varBindings.find { it.variable.name == POINT_X }
        val pointY = layerConfig.varBindings.find { it.variable.name == POINT_Y }

        val builder = GeomInteractionUtil.createGeomInteractionBuilder(
            layerConfig,
            emptyList(),
            false
        )

        assertFalse { builder.aesListForTooltip.contains(pointX!!.aes) }
        assertFalse { builder.aesListForTooltip.contains(pointY!!.aes) }
    }

    private fun createLayerConfig(plotOpts: MutableMap<String, Any>): LayerConfig {
        val plotSpec = PlotConfigServerSide.processTransform(plotOpts)
        return PlotConfigServerSide(plotSpec).layerConfigs.first()
    }

    private fun assertAesListCount(expectedCount: Int, aesList: List<Aes<*>>) {
        assertEquals(expectedCount, aesList.size)
    }
}*/