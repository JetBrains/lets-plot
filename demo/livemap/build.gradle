plugins {
    id "org.jetbrains.kotlin.multiplatform"
}

// KT-55751. MPP / Gradle: Consumable configurations must have unique attributes.
// https://youtrack.jetbrains.com/issue/KT-55751/MPP-Gradle-Consumable-configurations-must-have-unique-attributes
//
def dummyAttribute = Attribute.of("dummyAttribute", String)

kotlin {
    jvm("jvmJfx") {
        attributes.attribute(dummyAttribute, "jvmJfx")
    }
    jvm("jvmRawJfx") {
        attributes.attribute(dummyAttribute, "jvmRawJfx")
    }
    jvm("jvmRawAwt") {
        attributes.attribute(dummyAttribute, "jvmRawAwt")
    }
    jvm("jvmBrowser") {
        attributes.attribute(dummyAttribute, "jvmBrowser")
    }
    jvm("jvmJfxPlot") {
        attributes.attribute(dummyAttribute, "jvmJfxPlot")
    }
    jvm("jvmBatikPlot")
    js {
        browser()
        binaries.executable()
    }


    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation project(':commons')
                implementation project(':datamodel')
                implementation project(':plot-base')
                implementation project(':plot-builder')
                implementation project(':plot-stem')
                implementation project(':canvas')
                implementation project(':gis')
                implementation project(':livemap')
                implementation project(':plot-livemap')
                implementation project(':demo-and-test-shared')
                implementation project(':demo-common-util')
            }
        }
        allJvm {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                compileOnly "io.github.microutils:kotlin-logging-jvm:$kotlinLogging_version"
                implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:${kotlinx_html_version}"
                implementation "io.ktor:ktor-client-cio:$ktor_version"
                implementation "org.slf4j:slf4j-simple:$slf4j_version"  // Enable logging to console
                implementation("org.openjfx:javafx-base:$jfx_version:${jfx_platform()}")
                implementation("org.openjfx:javafx-controls:$jfx_version:${jfx_platform()}")
                implementation("org.openjfx:javafx-graphics:$jfx_version:${jfx_platform()}")
                implementation("org.openjfx:javafx-swing:$jfx_version:${jfx_platform()}")
            }
        }

        jvmJfxMain {
            dependsOn allJvm
            dependencies {
                implementation project(':platf-jfx-swing')
            }
        }

        jvmJfxPlotMain {
            dependsOn allJvm
            dependencies {
                implementation project(':platf-jfx-swing')
                implementation project(':platf-awt')
                implementation project(':demo-common-jfx')
            }
        }

        jvmBatikPlotMain {
            dependsOn allJvm
            dependencies {
                implementation project(':demo-common-batik')
                implementation project(':platf-awt')
                implementation project(':platf-batik')

                implementation("org.apache.xmlgraphics:batik-codec:$batik_version")
            }
        }

        jvmRawJfxMain {
            dependsOn allJvm
            dependencies {
                implementation project(':platf-jfx-swing')
            }
        }

        jvmRawAwtMain {
            dependsOn allJvm
            dependencies {
                implementation project(':platf-awt')
            }
        }

        jvmBrowserMain {
            dependsOn allJvm
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation project(':platf-w3c')

                implementation("io.ktor:ktor-client-websockets:$ktor_version")
                implementation("io.ktor:ktor-client-js:$ktor_version")

                languageSettings.optIn("kotlin.js.ExperimentalJsExport")
            }
        }
    }
}
